/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var dncl = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[5,9,21,22,23,24,25,26,31,45,46,47,48,49,50,61,71],$V1=[1,26],$V2=[1,27],$V3=[1,28],$V4=[1,29],$V5=[1,30],$V6=[1,31],$V7=[1,32],$V8=[1,24],$V9=[1,25],$Va=[1,15],$Vb=[1,16],$Vc=[1,17],$Vd=[1,18],$Ve=[1,19],$Vf=[1,20],$Vg=[1,22],$Vh=[5,9,21,22,23,24,25,26,31,45,46,47,48,49,50,52,53,59,61,62,71],$Vi=[1,34],$Vj=[1,35],$Vk=[2,24],$Vl=[1,48],$Vm=[1,49],$Vn=[1,50],$Vo=[1,51],$Vp=[1,52],$Vq=[1,53],$Vr=[1,54],$Vs=[1,55],$Vt=[1,56],$Vu=[1,57],$Vv=[1,58],$Vw=[1,59],$Vx=[1,60],$Vy=[1,61],$Vz=[1,62],$VA=[4,5,6,7,8,10,11,12,13,14,15,16,17,18,19,20,30,33,45,51,54,55,56,57,63,64,65,66,67,68],$VB=[4,5,6,7,8,10,11,12,13,14,15,16,17,18,19,20,30,33,45,51,55,56,57,63,64,66,67],$VC=[1,68],$VD=[33,45],$VE=[2,37],$VF=[30,33],$VG=[2,35],$VH=[5,9,21,22,23,24,25,26,31,45,46,47,48,49,50,59,61],$VI=[4,5,10,11,12,13,14,15,16,17,18,19,20,30,33,45,51,55,56,57,63,64,66,67],$VJ=[10,17,18,19,20,30,33,45,51,55,56,57,63,64,66,67],$VK=[10,17,18,20,30,33,45,51,55,56,57,63,64,66,67],$VL=[1,108],$VM=[10,30,33];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"e":3,"+":4,"-":5,"*":6,"/":7,"%":8,"(":9,")":10,"=":11,"!=":12,">":13,"<":14,">=":15,"<=":16,"AND":17,"OR":18,"NOT":19,"APPEND":20,"INTEGER":21,"FLOAT":22,"STRING":23,"TRUE":24,"FALSE":25,"IDENTIFIER":26,"parameterlist":27,"variable":28,"[":29,"]":30,"UNDEFINED":31,"variablelist":32,",":33,"statementlist":34,"statement":35,"EmptyStatement":36,"DefineStatement":37,"IfStatement":38,"ForStatement":39,"LoopStatement":40,"WhileStatement":41,"AssignStatement":42,"PrintStatement":43,"InputStatement":44,"NEWLINE":45,"DEFINT":46,"DEFFLOAT":47,"DEFSTR":48,"DEFBOOL":49,"IF":50,"THEN":51,"ENDIF":52,"ELSE":53,"FOR1":54,"FOR2":55,"FOR3":56,"FOR4":57,"FORINC":58,"ENDLOOP":59,"FORDEC":60,"LOOP":61,"UNTIL1":62,"UNTIL2":63,"WHILE":64,"<-":65,"PRINT":66,"PRINTLN":67,"INPUT":68,"Program":69,"SourceElements":70,"EOF":71,"SourceElement":72,"$accept":0,"$end":1},
terminals_: {2:"error",4:"+",5:"-",6:"*",7:"/",8:"%",9:"(",10:")",11:"=",12:"!=",13:">",14:"<",15:">=",16:"<=",17:"AND",18:"OR",19:"NOT",20:"APPEND",21:"INTEGER",22:"FLOAT",23:"STRING",24:"TRUE",25:"FALSE",26:"IDENTIFIER",29:"[",30:"]",31:"UNDEFINED",33:",",45:"NEWLINE",46:"DEFINT",47:"DEFFLOAT",48:"DEFSTR",49:"DEFBOOL",50:"IF",51:"THEN",52:"ENDIF",53:"ELSE",54:"FOR1",55:"FOR2",56:"FOR3",57:"FOR4",58:"FORINC",59:"ENDLOOP",60:"FORDEC",61:"LOOP",62:"UNTIL1",63:"UNTIL2",64:"WHILE",65:"<-",66:"PRINT",67:"PRINTLN",68:"INPUT",71:"EOF"},
productions_: [0,[3,3],[3,3],[3,3],[3,3],[3,3],[3,2],[3,3],[3,3],[3,3],[3,3],[3,3],[3,3],[3,3],[3,3],[3,3],[3,2],[3,3],[3,1],[3,1],[3,1],[3,1],[3,1],[3,4],[3,1],[28,4],[28,1],[28,1],[32,6],[32,3],[32,4],[32,1],[32,1],[27,3],[27,1],[27,0],[34,2],[34,0],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[36,1],[37,3],[37,3],[37,3],[37,3],[38,7],[38,10],[39,13],[39,13],[39,11],[39,11],[40,7],[41,6],[42,4],[43,3],[43,3],[44,3],[69,2],[70,2],[70,0],[72,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 this.$ = new Add($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 2:
 this.$ = new Sub($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 3:
 this.$ = new Mul($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 4:
 this.$ = new Div($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 5:
 this.$ = new Mod($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 6:
 this.$ = new Minus($$[$0], new Location(_$[$0], _$[$0]));
break;
case 7:
this.$ = $$[$0-1];
break;
case 8:
this.$ = new EQ($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 9:
this.$ = new NE($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 10:
this.$ = new GT($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 11:
this.$ = new LT($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 12:
this.$ = new GE($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 13:
this.$ = new LE($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 14:
this.$ = new And($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 15:
this.$ = new Or($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 16:
this.$ = new Not($$[$0-1], new Location(_$[$0-1], _$[$0-1]));
break;
case 17:
this.$ = new Append($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 18:
this.$ = new IntValue(Number(yytext), new Location(_$[$0],_$[$0]));
break;
case 19:
this.$ = new FloatValue(Number(yytext), new Location(_$[$0],_$[$0]));
break;
case 20:
this.$ = new StringValue(yytext.substring(1, yytext.length - 1), new Location(_$[$0], _$[$0]));
break;
case 21:
this.$ = new BooleanValue(true, new Location(_$[$0],_$[$0]));
break;
case 22:
this.$ = new BooleanValue(false, new Location(_$[$0],_$[$0]));
break;
case 23:
this.$ = new CallFunction($$[$0-3], $$[$0-1], new Location(_$[$0-3],_$[$0-3]));
break;
case 25:
this.$ = new Variable($$[$0-3], $$[$0-1], new Location(_$[$0-3],_$[$0-3]));
break;
case 26:
this.$ = new Variable($$[$0], null, new Location(_$[$0], _$[$0]));
break;
case 27:
this.$ = new UNDEFINED(new Location(_$[$0],_$[$0]));
break;
case 28:
this.$ = $$[$0-5].concat({varname:$$[$0-3], parameter:$$[$0-1]});
break;
case 29:
this.$ = $$[$0-2].concat({varname:$$[$0]});
break;
case 30:
this.$ = [{varname:$$[$0-3], parameter:$$[$0-1]}];
break;
case 31:
this.$ = [{varname:$$[$0]}];
break;
case 32:
this.$ = [new UNDEFINED(new Location(_$[$0],_$[$0]))];
break;
case 33:
this.$ = $$[$0-2].concat($$[$0]);
break;
case 34:
 this.$ = [$$[$0]];
break;
case 35: case 66:
 this.$ = [];
break;
case 36:
 if($$[$0] != null) this.$ = $$[$0-1].concat($$[$0]);
break;
case 37:
this.$ = [];
break;
case 47:
 this.$ = null;
break;
case 48:
this.$ = new DefinitionInt($$[$0-1], new Location(_$[$0-2],_$[$0-1]));
break;
case 49:
this.$ = new DefinitionFloat($$[$0-1], new Location(_$[$0-2],_$[$0-1]));
break;
case 50:
this.$ = new DefinitionString($$[$0-1], new Location(_$[$0-2],_$[$0-1]));
break;
case 51:
this.$ = new DefinitionBoolean($$[$0-1], new Location(_$[$0-2],_$[$0-1]));
break;
case 52:

		this.$ = new If($$[$0-5],$$[$0-2],null, new Location(_$[$0-6], _$[$0-1]));
	
break;
case 53:

		this.$ = new If($$[$0-8],$$[$0-5],$$[$0-2], new Location(_$[$0-9], _$[$0-1]));
	
break;
case 54:
this.$ = new ForInc($$[$0-12], $$[$0-10], $$[$0-8], $$[$0-6],$$[$0-2], new Location(_$[$0-12],_$[$0-1]));
break;
case 55:
this.$ = new ForDec($$[$0-12], $$[$0-10], $$[$0-8], $$[$0-6],$$[$0-2], new Location(_$[$0-12],_$[$0-1]));
break;
case 56:
this.$ = new ForInc($$[$0-10], $$[$0-8], $$[$0-6], new IntValue(1, new Location(_$[$0-10], _$[$0-10])),$$[$0-2], new Location(_$[$0-10],_$[$0-1]));
break;
case 57:
this.$ = new ForDec($$[$0-10], $$[$0-8], $$[$0-6], new IntValue(1, new Location(_$[$0-10], _$[$0-10])),$$[$0-2], new Location(_$[$0-10],_$[$0-1]));
break;
case 58:
this.$ = new Until($$[$0-4], $$[$0-2], new Location(_$[$0-6], _$[$0]));
break;
case 59:
this.$ = new While($$[$0-5], $$[$0-2], new Location(_$[$0-5], _$[$0]));
break;
case 60:
this.$ = new Assign($$[$0-3], $$[$0-1], new Location(_$[$0-3],_$[$0-1]));
break;
case 61:
this.$ = new Output($$[$0-2], false, new Location(_$[$0-2],_$[$0-1]));
break;
case 62:
this.$ = new Output($$[$0-2], true, new Location(_$[$0-2],_$[$0-1]));
break;
case 63:
this.$ = new Input($$[$0-2], new Location(_$[$0-2], _$[$0-1]));
break;
case 64:
 typeof console !== 'undefined' ? console.log($$[$0-1]) : print($$[$0-1]);
	          return $$[$0-1]; 
break;
case 65:
 this.$ = $$[$0-1].concat($$[$0]);
break;
}
},
table: [o($V0,[2,66],{69:1,70:2}),{1:[3]},{3:23,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:21,31:$V9,35:5,36:6,37:7,38:8,39:9,40:10,41:11,42:12,43:13,44:14,45:$Va,46:$Vb,47:$Vc,48:$Vd,49:$Ve,50:$Vf,61:$Vg,71:[1,3],72:4},{1:[2,64]},o($V0,[2,65]),o($V0,[2,67]),o($Vh,[2,38]),o($Vh,[2,39]),o($Vh,[2,40]),o($Vh,[2,41]),o($Vh,[2,42]),o($Vh,[2,43]),o($Vh,[2,44]),o($Vh,[2,45]),o($Vh,[2,46]),o($Vh,[2,47]),{26:$Vi,31:$Vj,32:33},{26:$Vi,31:$Vj,32:36},{26:$Vi,31:$Vj,32:37},{26:$Vi,31:$Vj,32:38},{3:39,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:40,31:$V9},o([4,5,6,7,8,11,12,13,14,15,16,17,18,19,20,64,66,67],$Vk,{54:[1,41],65:[1,42],68:[1,43]}),{45:[1,44]},{4:$Vl,5:$Vm,6:$Vn,7:$Vo,8:$Vp,11:$Vq,12:$Vr,13:$Vs,14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,20:$Vz,64:[1,45],66:[1,46],67:[1,47]},o($VA,[2,26],{9:[1,64],29:[1,63]}),o($VA,[2,27]),{3:65,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:40,31:$V9},{3:66,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:40,31:$V9},o($VB,[2,18]),o($VB,[2,19]),o($VB,[2,20]),o($VB,[2,21]),o($VB,[2,22]),{33:$VC,45:[1,67]},o($VD,[2,31],{29:[1,69]}),o($VD,[2,32]),{33:$VC,45:[1,70]},{33:$VC,45:[1,71]},{33:$VC,45:[1,72]},{4:$Vl,5:$Vm,6:$Vn,7:$Vo,8:$Vp,11:$Vq,12:$Vr,13:$Vs,14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,20:$Vz,51:[1,73]},o($VB,$Vk),{3:74,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:40,31:$V9},{3:75,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:40,31:$V9},{45:[1,76]},o([5,9,21,22,23,24,25,26,31,45,46,47,48,49,50,61,62],$VE,{34:77}),{45:[1,78]},{45:[1,79]},{45:[1,80]},{3:81,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:40,31:$V9},{3:82,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:40,31:$V9},{3:83,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:40,31:$V9},{3:84,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:40,31:$V9},{3:85,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:40,31:$V9},{3:86,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:40,31:$V9},{3:87,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:40,31:$V9},{3:88,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:40,31:$V9},{3:89,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:40,31:$V9},{3:90,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:40,31:$V9},{3:91,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:40,31:$V9},{3:92,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:40,31:$V9},{3:93,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:40,31:$V9},o($VB,[2,16]),{3:94,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:40,31:$V9},o($VF,$VG,{28:40,27:95,3:96,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,31:$V9}),o([10,33],$VG,{28:40,3:96,27:97,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,31:$V9}),o($VB,[2,6]),{4:$Vl,5:$Vm,6:$Vn,7:$Vo,8:$Vp,10:[1,98],11:$Vq,12:$Vr,13:$Vs,14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,20:$Vz},o($Vh,[2,48]),{26:[1,99]},o($VF,$VG,{28:40,3:96,27:100,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,31:$V9}),o($Vh,[2,49]),o($Vh,[2,50]),o($Vh,[2,51]),{45:[1,101]},{4:$Vl,5:$Vm,6:$Vn,7:$Vo,8:$Vp,11:$Vq,12:$Vr,13:$Vs,14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,20:$Vz,55:[1,102]},{4:$Vl,5:$Vm,6:$Vn,7:$Vo,8:$Vp,11:$Vq,12:$Vr,13:$Vs,14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,20:$Vz,45:[1,103]},o($Vh,[2,63]),{3:23,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:21,31:$V9,35:105,36:6,37:7,38:8,39:9,40:10,41:11,42:12,43:13,44:14,45:$Va,46:$Vb,47:$Vc,48:$Vd,49:$Ve,50:$Vf,61:$Vg,62:[1,104]},o($VH,$VE,{34:106}),o($Vh,[2,61]),o($Vh,[2,62]),o($VI,[2,1],{6:$Vn,7:$Vo,8:$Vp}),o($VI,[2,2],{6:$Vn,7:$Vo,8:$Vp}),o($VB,[2,3]),o($VB,[2,4]),o($VB,[2,5]),o($VJ,[2,8],{4:$Vl,5:$Vm,6:$Vn,7:$Vo,8:$Vp}),o($VJ,[2,9],{4:$Vl,5:$Vm,6:$Vn,7:$Vo,8:$Vp}),o($VJ,[2,10],{4:$Vl,5:$Vm,6:$Vn,7:$Vo,8:$Vp}),o($VJ,[2,11],{4:$Vl,5:$Vm,6:$Vn,7:$Vo,8:$Vp}),o($VJ,[2,12],{4:$Vl,5:$Vm,6:$Vn,7:$Vo,8:$Vp}),o($VJ,[2,13],{4:$Vl,5:$Vm,6:$Vn,7:$Vo,8:$Vp}),o($VK,[2,14],{4:$Vl,5:$Vm,6:$Vn,7:$Vo,8:$Vp,11:$Vq,12:$Vr,13:$Vs,14:$Vt,15:$Vu,16:$Vv,19:$Vy}),o($VK,[2,15],{4:$Vl,5:$Vm,6:$Vn,7:$Vo,8:$Vp,11:$Vq,12:$Vr,13:$Vs,14:$Vt,15:$Vu,16:$Vv,19:$Vy}),o([10,20,30,33,45,51,55,56,57,63,64,66,67],[2,17],{4:$Vl,5:$Vm,6:$Vn,7:$Vo,8:$Vp,11:$Vq,12:$Vr,13:$Vs,14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy}),{30:[1,107],33:$VL},o($VM,[2,34],{4:$Vl,5:$Vm,6:$Vn,7:$Vo,8:$Vp,11:$Vq,12:$Vr,13:$Vs,14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,20:$Vz}),{10:[1,109],33:$VL},o($VB,[2,7]),o($VD,[2,29],{29:[1,110]}),{30:[1,111],33:$VL},o([5,9,21,22,23,24,25,26,31,45,46,47,48,49,50,52,53,61],$VE,{34:112}),{3:113,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:40,31:$V9},o($Vh,[2,60]),{3:114,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:40,31:$V9},o([5,9,21,22,23,24,25,26,31,45,46,47,48,49,50,52,53,59,61,62],[2,36]),{3:23,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:21,31:$V9,35:105,36:6,37:7,38:8,39:9,40:10,41:11,42:12,43:13,44:14,45:$Va,46:$Vb,47:$Vc,48:$Vd,49:$Ve,50:$Vf,59:[1,115],61:$Vg},o($VA,[2,25]),{3:116,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:40,31:$V9},o($VB,[2,23]),o($VF,$VG,{28:40,3:96,27:117,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,31:$V9}),o($VD,[2,30]),{3:23,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:21,31:$V9,35:105,36:6,37:7,38:8,39:9,40:10,41:11,42:12,43:13,44:14,45:$Va,46:$Vb,47:$Vc,48:$Vd,49:$Ve,50:$Vf,52:[1,118],53:[1,119],61:$Vg},{4:$Vl,5:$Vm,6:$Vn,7:$Vo,8:$Vp,11:$Vq,12:$Vr,13:$Vs,14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,20:$Vz,56:[1,120]},{4:$Vl,5:$Vm,6:$Vn,7:$Vo,8:$Vp,11:$Vq,12:$Vr,13:$Vs,14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,20:$Vz,63:[1,121]},{45:[1,122]},o($VM,[2,33],{4:$Vl,5:$Vm,6:$Vn,7:$Vo,8:$Vp,11:$Vq,12:$Vr,13:$Vs,14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,20:$Vz}),{30:[1,123],33:$VL},{45:[1,124]},{45:[1,125]},{3:126,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:40,31:$V9,58:[1,127],60:[1,128]},{45:[1,129]},o($Vh,[2,59]),o($VD,[2,28]),o($Vh,[2,52]),o([5,9,21,22,23,24,25,26,31,45,46,47,48,49,50,52,61],$VE,{34:130}),{4:$Vl,5:$Vm,6:$Vn,7:$Vo,8:$Vp,11:$Vq,12:$Vr,13:$Vs,14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,20:$Vz,57:[1,131]},{45:[1,132]},{45:[1,133]},o($Vh,[2,58]),{3:23,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:21,31:$V9,35:105,36:6,37:7,38:8,39:9,40:10,41:11,42:12,43:13,44:14,45:$Va,46:$Vb,47:$Vc,48:$Vd,49:$Ve,50:$Vf,52:[1,134],61:$Vg},{58:[1,135],60:[1,136]},o($VH,$VE,{34:137}),o($VH,$VE,{34:138}),{45:[1,139]},{45:[1,140]},{45:[1,141]},{3:23,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:21,31:$V9,35:105,36:6,37:7,38:8,39:9,40:10,41:11,42:12,43:13,44:14,45:$Va,46:$Vb,47:$Vc,48:$Vd,49:$Ve,50:$Vf,59:[1,142],61:$Vg},{3:23,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:21,31:$V9,35:105,36:6,37:7,38:8,39:9,40:10,41:11,42:12,43:13,44:14,45:$Va,46:$Vb,47:$Vc,48:$Vd,49:$Ve,50:$Vf,59:[1,143],61:$Vg},o($Vh,[2,53]),o($VH,$VE,{34:144}),o($VH,$VE,{34:145}),{45:[1,146]},{45:[1,147]},{3:23,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:21,31:$V9,35:105,36:6,37:7,38:8,39:9,40:10,41:11,42:12,43:13,44:14,45:$Va,46:$Vb,47:$Vc,48:$Vd,49:$Ve,50:$Vf,59:[1,148],61:$Vg},{3:23,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:21,31:$V9,35:105,36:6,37:7,38:8,39:9,40:10,41:11,42:12,43:13,44:14,45:$Va,46:$Vb,47:$Vc,48:$Vd,49:$Ve,50:$Vf,59:[1,149],61:$Vg},o($Vh,[2,56]),o($Vh,[2,57]),{45:[1,150]},{45:[1,151]},o($Vh,[2,54]),o($Vh,[2,55])],
defaultActions: {3:[2,64]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 'true';
break;
case 1:return 'false';
break;
case 2:return 23;
break;
case 3:return 22;
break;
case 4:return 21;
break;
case 5:return 26;
break;
case 6:return 31;
break;
case 7:return 33;
break;
case 8:return 4;
break;
case 9:return 4;
break;
case 10:return 5;
break;
case 11:return 5;
break;
case 12:return 6;
break;
case 13:return 6;
break;
case 14:return 6;
break;
case 15:return 7;
break;
case 16:return 7;
break;
case 17:return 7;
break;
case 18:return 8;
break;
case 19:return 8;
break;
case 20:return 9;
break;
case 21:return 10;
break;
case 22:return 29;
break;
case 23:return 30;
break;
case 24:return 15;
break;
case 25:return 16;
break;
case 26:return 13;
break;
case 27:return 14;
break;
case 28:return 11;
break;
case 29:return 12;
break;
case 30:return 65;
break;
case 31:return 17;
break;
case 32:return 18;
break;
case 33:return 19;
break;
case 34:return 67;
break;
case 35:return 66;
break;
case 36:return 66;
break;
case 37:return 68;
break;
case 38:return 50;
break;
case 39:return 51;
break;
case 40:return 53;
break;
case 41:return 52;
break;
case 42:return 52;
break;
case 43:return 64;
break;
case 44:return 61;
break;
case 45:return 61;
break;
case 46:return 62;
break;
case 47:return 63;
break;
case 48:return 63;
break;
case 49:return 59;
break;
case 50:return 59;
break;
case 51:return 54;
break;
case 52:return 55;
break;
case 53:return 56;
break;
case 54:return 57;
break;
case 55:return 58;
break;
case 56:return 60;
break;
case 57:return 58;
break;
case 58:return 60;
break;
case 59:return 46;
break;
case 60:return 47;
break;
case 61:return 48;
break;
case 62:return 49;
break;
case 63:return 20;
break;
case 64:return 71;
break;
case 65:return 45;
break;
case 66:/* skip whitespace */
break;
}
},
rules: [/^(?:true\b)/,/^(?:false\b)/,/^(?:(「[^」]*」))/,/^(?:(([0]|(([1-9])([0-9])*))\.([0-9])+))/,/^(?:([0]|(([1-9])([0-9])*)))/,/^(?:(([a-zA-Z])([a-zA-Z0-9])*))/,/^(?:(《[^》]*》))/,/^(?:,)/,/^(?:\+)/,/^(?:＋)/,/^(?:-)/,/^(?:ー)/,/^(?:\*)/,/^(?:＊)/,/^(?:✕)/,/^(?:\/)/,/^(?:／)/,/^(?:÷)/,/^(?:%)/,/^(?:％)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:=)/,/^(?:!=)/,/^(?:←)/,/^(?:かつ)/,/^(?:または)/,/^(?:でない)/,/^(?:を(表示|印刷|出力)する)/,/^(?:を改行無しで(表示|印刷|出力)する)/,/^(?:を改行なしで(表示|印刷|出力)する)/,/^(?:を入力する)/,/^(?:もし)/,/^(?:ならば)/,/^(?:を実行し([，,、])そうでなければ)/,/^(?:を実行する)/,/^(?:を実行)/,/^(?:の間([，,、]))/,/^(?:繰り返し([，,、]))/,/^(?:繰返し([，,、]))/,/^(?:を([，,、]))/,/^(?:になるまで実行する)/,/^(?:になるまで実行)/,/^(?:を繰り返す)/,/^(?:を繰返す)/,/^(?:を)/,/^(?:から)/,/^(?:まで)/,/^(?:ずつ)/,/^(?:増やしながら)/,/^(?:減らしながら)/,/^(?:増やしつつ)/,/^(?:減らしつつ)/,/^(?:整数)/,/^(?:実数)/,/^(?:文字列)/,/^(?:真偽)/,/^(?:と)/,/^(?:$)/,/^(?:(\r\n|\r|\n))/,/^(?:([\s\t 　|｜]))/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = dncl;
exports.Parser = dncl.Parser;
exports.parse = function () { return dncl.parse.apply(dncl, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}