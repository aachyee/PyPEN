/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var dncl = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[5,9,21,22,23,24,25,26,44,45,46,47,48,49,60,71],$V1=[1,25],$V2=[1,26],$V3=[1,27],$V4=[1,28],$V5=[1,29],$V6=[1,30],$V7=[1,31],$V8=[1,24],$V9=[1,15],$Va=[1,16],$Vb=[1,17],$Vc=[1,18],$Vd=[1,19],$Ve=[1,20],$Vf=[1,22],$Vg=[5,9,21,22,23,24,25,26,44,45,46,47,48,49,51,52,58,60,61,71],$Vh=[1,33],$Vi=[2,24],$Vj=[1,46],$Vk=[1,47],$Vl=[1,48],$Vm=[1,49],$Vn=[1,50],$Vo=[1,51],$Vp=[1,52],$Vq=[1,53],$Vr=[1,54],$Vs=[1,55],$Vt=[1,56],$Vu=[1,57],$Vv=[1,58],$Vw=[1,59],$Vx=[1,60],$Vy=[4,5,6,7,8,10,11,12,13,14,15,16,17,18,19,20,30,32,44,50,53,54,55,56,62,63,64,66,67,68],$Vz=[4,5,6,7,8,10,11,12,13,14,15,16,17,18,19,20,30,32,44,50,54,55,56,62,63,66,67],$VA=[1,66],$VB=[32,44],$VC=[2,35],$VD=[30,32],$VE=[2,33],$VF=[5,9,21,22,23,24,25,26,44,45,46,47,48,49,58,60],$VG=[4,5,10,11,12,13,14,15,16,17,18,19,20,30,32,44,50,54,55,56,62,63,66,67],$VH=[10,17,18,19,20,30,32,44,50,54,55,56,62,63,66,67],$VI=[10,17,18,20,30,32,44,50,54,55,56,62,63,66,67],$VJ=[1,108],$VK=[10,30,32];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"e":3,"+":4,"-":5,"*":6,"/":7,"%":8,"(":9,")":10,"=":11,"!=":12,">":13,"<":14,">=":15,"<=":16,"AND":17,"OR":18,"NOT":19,"APPEND":20,"INTEGER":21,"FLOAT":22,"STRING":23,"TRUE":24,"FALSE":25,"IDENTIFIER":26,"parameterlist":27,"variable":28,"[":29,"]":30,"variablelist":31,",":32,"statementlist":33,"statement":34,"EmptyStatement":35,"DefineStatement":36,"IfStatement":37,"ForStatement":38,"LoopStatement":39,"WhileStatement":40,"AssignStatement":41,"PrintStatement":42,"InputStatement":43,"NEWLINE":44,"DEFINT":45,"DEFFLOAT":46,"DEFSTR":47,"DEFBOOL":48,"IF":49,"THEN":50,"ENDIF":51,"ELSE":52,"FOR1":53,"FOR2":54,"FOR3":55,"FOR4":56,"FORINC":57,"ENDLOOP":58,"FORDEC":59,"LOOP":60,"UNTIL1":61,"UNTIL2":62,"WHILE":63,"<-":64,"condition":65,"PRINT":66,"PRINTLN":67,"INPUT":68,"Program":69,"SourceElements":70,"EOF":71,"SourceElement":72,"$accept":0,"$end":1},
terminals_: {2:"error",4:"+",5:"-",6:"*",7:"/",8:"%",9:"(",10:")",11:"=",12:"!=",13:">",14:"<",15:">=",16:"<=",17:"AND",18:"OR",19:"NOT",20:"APPEND",21:"INTEGER",22:"FLOAT",23:"STRING",24:"TRUE",25:"FALSE",26:"IDENTIFIER",29:"[",30:"]",32:",",44:"NEWLINE",45:"DEFINT",46:"DEFFLOAT",47:"DEFSTR",48:"DEFBOOL",49:"IF",50:"THEN",51:"ENDIF",52:"ELSE",53:"FOR1",54:"FOR2",55:"FOR3",56:"FOR4",57:"FORINC",58:"ENDLOOP",59:"FORDEC",60:"LOOP",61:"UNTIL1",62:"UNTIL2",63:"WHILE",64:"<-",65:"condition",66:"PRINT",67:"PRINTLN",68:"INPUT",71:"EOF"},
productions_: [0,[3,3],[3,3],[3,3],[3,3],[3,3],[3,2],[3,3],[3,3],[3,3],[3,3],[3,3],[3,3],[3,3],[3,3],[3,3],[3,2],[3,3],[3,1],[3,1],[3,1],[3,1],[3,1],[3,4],[3,1],[28,4],[28,1],[31,6],[31,3],[31,4],[31,1],[27,3],[27,1],[27,0],[33,2],[33,0],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[35,1],[36,3],[36,3],[36,3],[36,3],[37,7],[37,10],[38,13],[38,13],[38,11],[38,11],[39,7],[40,6],[41,4],[41,4],[42,3],[42,3],[43,3],[69,2],[70,2],[70,0],[72,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 this.$ = new Add($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 2:
 this.$ = new Sub($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 3:
 this.$ = new Mul($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 4:
 this.$ = new Div($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 5:
 this.$ = new Mod($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 6:
 this.$ = new Minus($$[$0], new Location(_$[$0], _$[$0]));
break;
case 7:
this.$ = $$[$0-1];
break;
case 8:
this.$ = new EQ($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 9:
this.$ = new NE($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 10:
this.$ = new GT($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 11:
this.$ = new LT($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 12:
this.$ = new GE($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 13:
this.$ = new LE($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 14:
this.$ = new And($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 15:
this.$ = new Or($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 16:
this.$ = new Not($$[$0-1], new Location(_$[$0-1], _$[$0-1]));
break;
case 17:
this.$ = new Append($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 18:
this.$ = new IntValue(Number(yytext), new Location(_$[$0],_$[$0]));
break;
case 19:
this.$ = new FloatValue(Number(yytext), new Location(_$[$0],_$[$0]));
break;
case 20:
this.$ = new StringValue(yytext.substring(1, yytext.length - 1), new Location(_$[$0], _$[$0]));
break;
case 21:
this.$ = new BooleanValue(true, new Location(_$[$0],_$[$0]));
break;
case 22:
this.$ = new BooleanValue(false, new Location(_$[$0],_$[$0]));
break;
case 23:
this.$ = new CallFunction($$[$0-3], $$[$0-1], new Location(_$[$0-3],_$[$0-3]));
break;
case 25:
this.$ = new Variable($$[$0-3], $$[$0-1], new Location(_$[$0-3],_$[$0-3]));
break;
case 26:
this.$ = new Variable($$[$0], null, new Location(_$[$0], _$[$0]));
break;
case 27:
this.$ = $$[$0-5].concat({varname:$$[$0-3], parameter:$$[$0-1]});
break;
case 28:
this.$ = $$[$0-2].concat({varname:$$[$0]});
break;
case 29:
this.$ = [{varname:$$[$0-3], parameter:$$[$0-1]}];
break;
case 30:
this.$ = [{varname:$$[$0]}];
break;
case 31:
this.$ = $$[$0-2].concat($$[$0]);
break;
case 32:
 this.$ = [$$[$0]];
break;
case 33: case 65:
 this.$ = [];
break;
case 34:
 if($$[$0] != null) this.$ = $$[$0-1].concat($$[$0]);
break;
case 35:
this.$ = [];
break;
case 45:
 this.$ = null;
break;
case 46:
this.$ = new DefinitionInt($$[$0-1], new Location(_$[$0-2],_$[$0-1]));
break;
case 47:
this.$ = new DefinitionFloat($$[$0-1], new Location(_$[$0-2],_$[$0-1]));
break;
case 48:
this.$ = new DefinitionString($$[$0-1], new Location(_$[$0-2],_$[$0-1]));
break;
case 49:
this.$ = new DefinitionBoolean($$[$0-1], new Location(_$[$0-2],_$[$0-1]));
break;
case 50:

		this.$ = new If($$[$0-5],$$[$0-2],null, new Location(_$[$0-6], _$[$0-1]));
	
break;
case 51:

		this.$ = new If($$[$0-8],$$[$0-5],$$[$0-2], new Location(_$[$0-9], _$[$0-1]));
	
break;
case 52:
this.$ = new ForInc($$[$0-12], $$[$0-10], $$[$0-8], $$[$0-6],$$[$0-2], new Location(_$[$0-12],_$[$0-1]));
break;
case 53:
this.$ = new ForDec($$[$0-12], $$[$0-10], $$[$0-8], $$[$0-6],$$[$0-2], new Location(_$[$0-12],_$[$0-1]));
break;
case 54:
this.$ = new ForInc($$[$0-10], $$[$0-8], $$[$0-6], new IntValue(1, new Location(_$[$0-10], _$[$0-10])),$$[$0-2], new Location(_$[$0-10],_$[$0-1]));
break;
case 55:
this.$ = new ForDec($$[$0-10], $$[$0-8], $$[$0-6], new IntValue(1, new Location(_$[$0-10], _$[$0-10])),$$[$0-2], new Location(_$[$0-10],_$[$0-1]));
break;
case 56:
this.$ = new Until($$[$0-4], $$[$0-2], new Location(_$[$0-6], _$[$0]));
break;
case 57:
this.$ = new While($$[$0-5], $$[$0-2], new Location(_$[$0-5], _$[$0]));
break;
case 58: case 59:
this.$ = new Assign($$[$0-3], $$[$0-1], new Location(_$[$0-3],_$[$0-1]));
break;
case 60:
this.$ = new Output($$[$0-2], false, new Location(_$[$0-2],_$[$0-1]));
break;
case 61:
this.$ = new Output($$[$0-2], true, new Location(_$[$0-2],_$[$0-1]));
break;
case 62:
this.$ = new Input($$[$0-2], new Location(_$[$0-2], _$[$0-1]));
break;
case 63:
 typeof console !== 'undefined' ? console.log($$[$0-1]) : print($$[$0-1]);
	          return $$[$0-1]; 
break;
case 64:
 this.$ = $$[$0-1].concat($$[$0]);
break;
}
},
table: [o($V0,[2,65],{69:1,70:2}),{1:[3]},{3:23,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:21,34:5,35:6,36:7,37:8,38:9,39:10,40:11,41:12,42:13,43:14,44:$V9,45:$Va,46:$Vb,47:$Vc,48:$Vd,49:$Ve,60:$Vf,71:[1,3],72:4},{1:[2,63]},o($V0,[2,64]),o($V0,[2,66]),o($Vg,[2,36]),o($Vg,[2,37]),o($Vg,[2,38]),o($Vg,[2,39]),o($Vg,[2,40]),o($Vg,[2,41]),o($Vg,[2,42]),o($Vg,[2,43]),o($Vg,[2,44]),o($Vg,[2,45]),{26:$Vh,31:32},{26:$Vh,31:34},{26:$Vh,31:35},{26:$Vh,31:36},{3:37,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:38},o([4,5,6,7,8,11,12,13,14,15,16,17,18,19,20,63,66,67],$Vi,{53:[1,39],64:[1,40],68:[1,41]}),{44:[1,42]},{4:$Vj,5:$Vk,6:$Vl,7:$Vm,8:$Vn,11:$Vo,12:$Vp,13:$Vq,14:$Vr,15:$Vs,16:$Vt,17:$Vu,18:$Vv,19:$Vw,20:$Vx,63:[1,43],66:[1,44],67:[1,45]},o($Vy,[2,26],{9:[1,62],29:[1,61]}),{3:63,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:38},{3:64,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:38},o($Vz,[2,18]),o($Vz,[2,19]),o($Vz,[2,20]),o($Vz,[2,21]),o($Vz,[2,22]),{32:$VA,44:[1,65]},o($VB,[2,30],{29:[1,67]}),{32:$VA,44:[1,68]},{32:$VA,44:[1,69]},{32:$VA,44:[1,70]},{4:$Vj,5:$Vk,6:$Vl,7:$Vm,8:$Vn,11:$Vo,12:$Vp,13:$Vq,14:$Vr,15:$Vs,16:$Vt,17:$Vu,18:$Vv,19:$Vw,20:$Vx,50:[1,71]},o($Vz,$Vi),{3:72,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:38},{3:73,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:38,65:[1,74]},{44:[1,75]},o([5,9,21,22,23,24,25,26,44,45,46,47,48,49,60,61],$VC,{33:76}),{44:[1,77]},{44:[1,78]},{44:[1,79]},{3:80,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:38},{3:81,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:38},{3:82,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:38},{3:83,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:38},{3:84,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:38},{3:85,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:38},{3:86,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:38},{3:87,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:38},{3:88,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:38},{3:89,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:38},{3:90,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:38},{3:91,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:38},{3:92,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:38},o($Vz,[2,16]),{3:93,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:38},o($VD,$VE,{28:38,27:94,3:95,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8}),o([10,32],$VE,{28:38,3:95,27:96,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8}),o($Vz,[2,6]),{4:$Vj,5:$Vk,6:$Vl,7:$Vm,8:$Vn,10:[1,97],11:$Vo,12:$Vp,13:$Vq,14:$Vr,15:$Vs,16:$Vt,17:$Vu,18:$Vv,19:$Vw,20:$Vx},o($Vg,[2,46]),{26:[1,98]},o($VD,$VE,{28:38,3:95,27:99,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8}),o($Vg,[2,47]),o($Vg,[2,48]),o($Vg,[2,49]),{44:[1,100]},{4:$Vj,5:$Vk,6:$Vl,7:$Vm,8:$Vn,11:$Vo,12:$Vp,13:$Vq,14:$Vr,15:$Vs,16:$Vt,17:$Vu,18:$Vv,19:$Vw,20:$Vx,54:[1,101]},{4:$Vj,5:$Vk,6:$Vl,7:$Vm,8:$Vn,11:$Vo,12:$Vp,13:$Vq,14:$Vr,15:$Vs,16:$Vt,17:$Vu,18:$Vv,19:$Vw,20:$Vx,44:[1,102]},{44:[1,103]},o($Vg,[2,62]),{3:23,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:21,34:105,35:6,36:7,37:8,38:9,39:10,40:11,41:12,42:13,43:14,44:$V9,45:$Va,46:$Vb,47:$Vc,48:$Vd,49:$Ve,60:$Vf,61:[1,104]},o($VF,$VC,{33:106}),o($Vg,[2,60]),o($Vg,[2,61]),o($VG,[2,1],{6:$Vl,7:$Vm,8:$Vn}),o($VG,[2,2],{6:$Vl,7:$Vm,8:$Vn}),o($Vz,[2,3]),o($Vz,[2,4]),o($Vz,[2,5]),o($VH,[2,8],{4:$Vj,5:$Vk,6:$Vl,7:$Vm,8:$Vn}),o($VH,[2,9],{4:$Vj,5:$Vk,6:$Vl,7:$Vm,8:$Vn}),o($VH,[2,10],{4:$Vj,5:$Vk,6:$Vl,7:$Vm,8:$Vn}),o($VH,[2,11],{4:$Vj,5:$Vk,6:$Vl,7:$Vm,8:$Vn}),o($VH,[2,12],{4:$Vj,5:$Vk,6:$Vl,7:$Vm,8:$Vn}),o($VH,[2,13],{4:$Vj,5:$Vk,6:$Vl,7:$Vm,8:$Vn}),o($VI,[2,14],{4:$Vj,5:$Vk,6:$Vl,7:$Vm,8:$Vn,11:$Vo,12:$Vp,13:$Vq,14:$Vr,15:$Vs,16:$Vt,19:$Vw}),o($VI,[2,15],{4:$Vj,5:$Vk,6:$Vl,7:$Vm,8:$Vn,11:$Vo,12:$Vp,13:$Vq,14:$Vr,15:$Vs,16:$Vt,19:$Vw}),o([10,20,30,32,44,50,54,55,56,62,63,66,67],[2,17],{4:$Vj,5:$Vk,6:$Vl,7:$Vm,8:$Vn,11:$Vo,12:$Vp,13:$Vq,14:$Vr,15:$Vs,16:$Vt,17:$Vu,18:$Vv,19:$Vw}),{30:[1,107],32:$VJ},o($VK,[2,32],{4:$Vj,5:$Vk,6:$Vl,7:$Vm,8:$Vn,11:$Vo,12:$Vp,13:$Vq,14:$Vr,15:$Vs,16:$Vt,17:$Vu,18:$Vv,19:$Vw,20:$Vx}),{10:[1,109],32:$VJ},o($Vz,[2,7]),o($VB,[2,28],{29:[1,110]}),{30:[1,111],32:$VJ},o([5,9,21,22,23,24,25,26,44,45,46,47,48,49,51,52,60],$VC,{33:112}),{3:113,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:38},o($Vg,[2,58]),o($Vg,[2,59]),{3:114,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:38},o([5,9,21,22,23,24,25,26,44,45,46,47,48,49,51,52,58,60,61],[2,34]),{3:23,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:21,34:105,35:6,36:7,37:8,38:9,39:10,40:11,41:12,42:13,43:14,44:$V9,45:$Va,46:$Vb,47:$Vc,48:$Vd,49:$Ve,58:[1,115],60:$Vf},o($Vy,[2,25]),{3:116,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:38},o($Vz,[2,23]),o($VD,$VE,{28:38,3:95,27:117,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8}),o($VB,[2,29]),{3:23,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:21,34:105,35:6,36:7,37:8,38:9,39:10,40:11,41:12,42:13,43:14,44:$V9,45:$Va,46:$Vb,47:$Vc,48:$Vd,49:$Ve,51:[1,118],52:[1,119],60:$Vf},{4:$Vj,5:$Vk,6:$Vl,7:$Vm,8:$Vn,11:$Vo,12:$Vp,13:$Vq,14:$Vr,15:$Vs,16:$Vt,17:$Vu,18:$Vv,19:$Vw,20:$Vx,55:[1,120]},{4:$Vj,5:$Vk,6:$Vl,7:$Vm,8:$Vn,11:$Vo,12:$Vp,13:$Vq,14:$Vr,15:$Vs,16:$Vt,17:$Vu,18:$Vv,19:$Vw,20:$Vx,62:[1,121]},{44:[1,122]},o($VK,[2,31],{4:$Vj,5:$Vk,6:$Vl,7:$Vm,8:$Vn,11:$Vo,12:$Vp,13:$Vq,14:$Vr,15:$Vs,16:$Vt,17:$Vu,18:$Vv,19:$Vw,20:$Vx}),{30:[1,123],32:$VJ},{44:[1,124]},{44:[1,125]},{3:126,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:38,57:[1,127],59:[1,128]},{44:[1,129]},o($Vg,[2,57]),o($VB,[2,27]),o($Vg,[2,50]),o([5,9,21,22,23,24,25,26,44,45,46,47,48,49,51,60],$VC,{33:130}),{4:$Vj,5:$Vk,6:$Vl,7:$Vm,8:$Vn,11:$Vo,12:$Vp,13:$Vq,14:$Vr,15:$Vs,16:$Vt,17:$Vu,18:$Vv,19:$Vw,20:$Vx,56:[1,131]},{44:[1,132]},{44:[1,133]},o($Vg,[2,56]),{3:23,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:21,34:105,35:6,36:7,37:8,38:9,39:10,40:11,41:12,42:13,43:14,44:$V9,45:$Va,46:$Vb,47:$Vc,48:$Vd,49:$Ve,51:[1,134],60:$Vf},{57:[1,135],59:[1,136]},o($VF,$VC,{33:137}),o($VF,$VC,{33:138}),{44:[1,139]},{44:[1,140]},{44:[1,141]},{3:23,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:21,34:105,35:6,36:7,37:8,38:9,39:10,40:11,41:12,42:13,43:14,44:$V9,45:$Va,46:$Vb,47:$Vc,48:$Vd,49:$Ve,58:[1,142],60:$Vf},{3:23,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:21,34:105,35:6,36:7,37:8,38:9,39:10,40:11,41:12,42:13,43:14,44:$V9,45:$Va,46:$Vb,47:$Vc,48:$Vd,49:$Ve,58:[1,143],60:$Vf},o($Vg,[2,51]),o($VF,$VC,{33:144}),o($VF,$VC,{33:145}),{44:[1,146]},{44:[1,147]},{3:23,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:21,34:105,35:6,36:7,37:8,38:9,39:10,40:11,41:12,42:13,43:14,44:$V9,45:$Va,46:$Vb,47:$Vc,48:$Vd,49:$Ve,58:[1,148],60:$Vf},{3:23,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:21,34:105,35:6,36:7,37:8,38:9,39:10,40:11,41:12,42:13,43:14,44:$V9,45:$Va,46:$Vb,47:$Vc,48:$Vd,49:$Ve,58:[1,149],60:$Vf},o($Vg,[2,54]),o($Vg,[2,55]),{44:[1,150]},{44:[1,151]},o($Vg,[2,52]),o($Vg,[2,53])],
defaultActions: {3:[2,63]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 'true';
break;
case 1:return 'false';
break;
case 2:return 23;
break;
case 3:return 22;
break;
case 4:return 21;
break;
case 5:return 26;
break;
case 6:return 32;
break;
case 7:return 4;
break;
case 8:return 4;
break;
case 9:return 5;
break;
case 10:return 5;
break;
case 11:return 6;
break;
case 12:return 6;
break;
case 13:return 6;
break;
case 14:return 7;
break;
case 15:return 7;
break;
case 16:return 7;
break;
case 17:return 8;
break;
case 18:return 8;
break;
case 19:return 9;
break;
case 20:return 10;
break;
case 21:return 29;
break;
case 22:return 30;
break;
case 23:return 15;
break;
case 24:return 16;
break;
case 25:return 13;
break;
case 26:return 14;
break;
case 27:return 11;
break;
case 28:return 12;
break;
case 29:return 64;
break;
case 30:return 17;
break;
case 31:return 18;
break;
case 32:return 19;
break;
case 33:return 67;
break;
case 34:return 66;
break;
case 35:return 66;
break;
case 36:return 68;
break;
case 37:return 49;
break;
case 38:return 50;
break;
case 39:return 52;
break;
case 40:return 51;
break;
case 41:return 51;
break;
case 42:return 63;
break;
case 43:return 60;
break;
case 44:return 60;
break;
case 45:return 61;
break;
case 46:return 62;
break;
case 47:return 62;
break;
case 48:return 58;
break;
case 49:return 58;
break;
case 50:return 53;
break;
case 51:return 54;
break;
case 52:return 55;
break;
case 53:return 56;
break;
case 54:return 57;
break;
case 55:return 59;
break;
case 56:return 57;
break;
case 57:return 59;
break;
case 58:return 45;
break;
case 59:return 46;
break;
case 60:return 47;
break;
case 61:return 48;
break;
case 62:return 20;
break;
case 63:return 71;
break;
case 64:return 44;
break;
case 65:/* skip whitespace */
break;
}
},
rules: [/^(?:true\b)/,/^(?:false\b)/,/^(?:(「[^」]*」))/,/^(?:(([0]|(([1-9])([0-9])*))\.([0-9])+))/,/^(?:([0]|(([1-9])([0-9])*)))/,/^(?:(([a-zA-Z])([a-zA-Z0-9])*))/,/^(?:,)/,/^(?:\+)/,/^(?:＋)/,/^(?:-)/,/^(?:ー)/,/^(?:\*)/,/^(?:＊)/,/^(?:✕)/,/^(?:\/)/,/^(?:／)/,/^(?:÷)/,/^(?:%)/,/^(?:％)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:=)/,/^(?:!=)/,/^(?:←)/,/^(?:かつ)/,/^(?:または)/,/^(?:でない)/,/^(?:を(表示|印刷|出力)する)/,/^(?:を改行無しで(表示|印刷|出力)する)/,/^(?:を改行なしで(表示|印刷|出力)する)/,/^(?:を入力する)/,/^(?:もし)/,/^(?:ならば)/,/^(?:を実行し([，,、])そうでなければ)/,/^(?:を実行する)/,/^(?:を実行)/,/^(?:の間([，,、]))/,/^(?:繰り返し([，,、]))/,/^(?:繰返し([，,、]))/,/^(?:を([，,、]))/,/^(?:になるまで実行する)/,/^(?:になるまで実行)/,/^(?:を繰り返す)/,/^(?:を繰返す)/,/^(?:を)/,/^(?:から)/,/^(?:まで)/,/^(?:ずつ)/,/^(?:増やしながら)/,/^(?:減らしながら)/,/^(?:増やしつつ)/,/^(?:減らしつつ)/,/^(?:整数)/,/^(?:実数)/,/^(?:文字列)/,/^(?:真偽)/,/^(?:と)/,/^(?:$)/,/^(?:(\r\n|\r|\n))/,/^(?:([\s\t 　|｜]))/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = dncl;
exports.Parser = dncl.Parser;
exports.parse = function () { return dncl.parse.apply(dncl, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}