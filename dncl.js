/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var dncl = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[5,10,22,23,24,25,26,27,28,29,30,31,34,36,38,58,59,60,63,64,66,80,83,84,85,86,87,88,89,90,91,92,93,94,95,97,100],$V1=[1,50],$V2=[1,51],$V3=[1,52],$V4=[1,53],$V5=[1,54],$V6=[1,55],$V7=[1,56],$V8=[1,22],$V9=[1,23],$Va=[1,24],$Vb=[1,25],$Vc=[1,26],$Vd=[1,57],$Ve=[1,58],$Vf=[1,49],$Vg=[1,21],$Vh=[1,47],$Vi=[1,44],$Vj=[1,45],$Vk=[1,46],$Vl=[1,43],$Vm=[1,29],$Vn=[1,30],$Vo=[1,31],$Vp=[1,32],$Vq=[1,33],$Vr=[1,34],$Vs=[1,35],$Vt=[1,36],$Vu=[1,37],$Vv=[1,38],$Vw=[1,39],$Vx=[1,40],$Vy=[1,41],$Vz=[1,42],$VA=[1,48],$VB=[5,10,22,23,24,25,26,27,28,29,30,31,34,36,38,58,59,60,62,63,64,66,68,80,83,84,85,86,87,88,89,90,91,92,93,94,95,97,100],$VC=[1,60],$VD=[1,61],$VE=[1,62],$VF=[1,64],$VG=[1,66],$VH=[1,68],$VI=[2,33],$VJ=[1,70],$VK=[4,5,6,7,8,9,12,13,14,15,16,17,18,19,20,21,65,76,78,79,96],$VL=[2,29],$VM=[1,79],$VN=[1,80],$VO=[1,81],$VP=[1,82],$VQ=[1,83],$VR=[1,84],$VS=[1,85],$VT=[1,86],$VU=[1,87],$VV=[1,88],$VW=[1,89],$VX=[1,90],$VY=[1,91],$VZ=[1,92],$V_=[1,93],$V$=[1,94],$V01=[1,110],$V11=[1,111],$V21=[1,112],$V31=[1,113],$V41=[1,114],$V51=[4,5,6,7,8,9,11,12,13,14,15,16,17,18,19,20,21,35,37,40,58,65,67,69,70,71,72,76,77,78,79,81,96],$V61=[4,5,6,7,8,9,11,12,13,14,15,16,17,18,19,20,21,35,37,40,58,65,67,70,71,72,76,78,79,96],$V71=[35,40],$V81=[2,42],$V91=[1,128],$Va1=[40,58],$Vb1=[11,40],$Vc1=[1,185],$Vd1=[11,35,37,40],$Ve1=[4,5,11,12,13,14,15,16,17,18,19,20,21,35,37,40,58,65,67,70,71,72,76,78,79,96],$Vf1=[11,18,19,20,21,35,37,40,58,65,67,70,71,72,76,78,79,96],$Vg1=[11,18,19,21,35,37,40,58,65,67,70,71,72,76,78,79,96],$Vh1=[2,28],$Vi1=[5,10,22,23,24,25,26,27,28,29,30,31,34,36,38,58,59,60,62,63,64,66,80,83,84,85,86,87,88,89,90,91,92,93,94,95,97],$Vj1=[2,44],$Vk1=[5,10,22,23,24,25,26,27,28,29,30,31,34,36,38,58,59,60,62,63,64,66,68,80,83,84,85,86,87,88,89,90,91,92,93,94,95,97];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"e":3,"+":4,"-":5,"*":6,"/":7,"//":8,"%":9,"(":10,")":11,"=":12,"!=":13,">":14,"<":15,">=":16,"<=":17,"かつ":18,"または":19,"でない":20,"と":21,"整数値":22,"実数値":23,"文字列値":24,"TRUE":25,"FALSE":26,"整数":27,"実数":28,"文字列":29,"真偽":30,"識別子":31,"args":32,"variable":33,"[":34,"]":35,"{":36,"}":37,"UNDEFINED":38,"variablelist":39,"COMMA":40,"statementlist":41,"statement":42,"EmptyStatement":43,"DefineStatement":44,"CallStatement":45,"AssignStatement":46,"PrintStatement":47,"InputStatement":48,"GraphicStatement":49,"ForStatement":50,"WhileStatement":51,"IfStatement":52,"SleepStatement":53,"DefineFuncStatement":54,"ReturnStatement":55,"DumpStatement":56,"BreakStatement":57,"改行":58,"変数を確認する":59,"手続き":60,":":61,"EOB":62,"関数":63,"手続きを抜ける":64,"を返す":65,"もし":66,"ならば":67,"そうでなければ":68,"を":69,"から":70,"まで":71,"ずつ":72,"増やしながら":73,"繰り返す":74,"減らしながら":75,"の間繰返す":76,"←":77,"を改行無しで表示する":78,"を表示する":79,"改行する":80,"に":81,"を入力する":82,"gOpenWindow":83,"gCloseWindow":84,"gClearWindow":85,"gSetLineColor":86,"gSetFillColor":87,"gSetLineWidth":88,"gSetFontSize":89,"gDrawText":90,"gDrawLine":91,"gDrawBox":92,"gFillBox":93,"gDrawCircle":94,"gFillCircle":95,"ミリ秒待つ":96,"繰り返しを抜ける":97,"Program":98,"SourceElements":99,"EOF":100,"SourceElement":101,"$accept":0,"$end":1},
terminals_: {2:"error",4:"+",5:"-",6:"*",7:"/",8:"//",9:"%",10:"(",11:")",12:"=",13:"!=",14:">",15:"<",16:">=",17:"<=",18:"かつ",19:"または",20:"でない",21:"と",22:"整数値",23:"実数値",24:"文字列値",25:"TRUE",26:"FALSE",27:"整数",28:"実数",29:"文字列",30:"真偽",31:"識別子",34:"[",35:"]",36:"{",37:"}",38:"UNDEFINED",40:"COMMA",58:"改行",59:"変数を確認する",60:"手続き",61:":",62:"EOB",63:"関数",64:"手続きを抜ける",65:"を返す",66:"もし",67:"ならば",68:"そうでなければ",69:"を",70:"から",71:"まで",72:"ずつ",73:"増やしながら",74:"繰り返す",75:"減らしながら",76:"の間繰返す",77:"←",78:"を改行無しで表示する",79:"を表示する",80:"改行する",81:"に",82:"を入力する",83:"gOpenWindow",84:"gCloseWindow",85:"gClearWindow",86:"gSetLineColor",87:"gSetFillColor",88:"gSetLineWidth",89:"gSetFontSize",90:"gDrawText",91:"gDrawLine",92:"gDrawBox",93:"gFillBox",94:"gDrawCircle",95:"gFillCircle",96:"ミリ秒待つ",97:"繰り返しを抜ける",100:"EOF"},
productions_: [0,[3,3],[3,3],[3,3],[3,3],[3,3],[3,3],[3,2],[3,3],[3,3],[3,3],[3,3],[3,3],[3,3],[3,3],[3,3],[3,3],[3,2],[3,3],[3,1],[3,1],[3,1],[3,1],[3,1],[3,4],[3,4],[3,4],[3,4],[3,4],[3,1],[3,3],[3,3],[33,4],[33,1],[33,1],[39,6],[39,3],[39,4],[39,1],[39,1],[32,3],[32,1],[32,0],[41,2],[41,0],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[43,1],[56,2],[56,4],[54,10],[54,10],[55,2],[55,3],[44,3],[44,3],[44,3],[44,3],[45,5],[52,8],[52,12],[50,15],[50,15],[50,13],[50,13],[51,7],[46,4],[47,3],[47,3],[47,2],[48,5],[48,5],[48,5],[48,5],[49,7],[49,4],[49,4],[49,9],[49,9],[49,5],[49,5],[49,9],[49,11],[49,11],[49,11],[49,9],[49,9],[53,3],[57,2],[98,2],[99,2],[99,0],[101,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$ = new Add($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 2:
this.$ = new Sub($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 3:
this.$ = new Mul($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 4:
this.$ = new Div($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 5:
this.$ = new DivInt($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 6:
this.$ = new Mod($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 7:
 this.$ = new Minus($$[$0], new Location(_$[$0], _$[$0]));
break;
case 8:
this.$ = $$[$0-1];
break;
case 9:
this.$ = new EQ($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 10:
this.$ = new NE($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 11:
this.$ = new GT($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 12:
this.$ = new LT($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 13:
this.$ = new GE($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 14:
this.$ = new LE($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 15:
this.$ = new And($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 16:
this.$ = new Or($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 17:
this.$ = new Not($$[$0-1], new Location(_$[$0-1], _$[$0-1]));
break;
case 18:
this.$ = new Append($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 19:
this.$ = new IntValue(Number(toHalf(yytext,_$[$0])), new Location(_$[$0],_$[$0]));
break;
case 20:
this.$ = new FloatValue(Number(toHalf(yytext,_$[$0])), new Location(_$[$0],_$[$0]));
break;
case 21:
this.$ = new StringValue(yytext.substring(1, yytext.length - 1), new Location(_$[$0], _$[$0]));
break;
case 22:
this.$ = new BooleanValue(true, new Location(_$[$0],_$[$0]));
break;
case 23:
this.$ = new BooleanValue(false, new Location(_$[$0],_$[$0]));
break;
case 24:
this.$ = new ConvertInt($$[$0-1], new Location(_$[$0-3], _$[$0]));
break;
case 25:
this.$ = new ConvertFloat($$[$0-1], new Location(_$[$0-3], _$[$0]));
break;
case 26:
this.$ = new ConvertString($$[$0-1], new Location(_$[$0-3], _$[$0]));
break;
case 27:
this.$ = new ConvertBool($$[$0-1], new Location(_$[$0-3], _$[$0]));
break;
case 28:
this.$ = new CallFunction($$[$0-3], $$[$0-1], new Location(_$[$0-3],_$[$0-3]));
break;
case 29:
this.$ = $$[$0];
break;
case 30: case 31:
this.$ = new ArrayValue($$[$0-1], new Location(_$[$0-2], _$[$0]));
break;
case 32:
this.$ = new Variable(toHalf($$[$0-3], _$[$0-3]), new ArrayValue($$[$0-1]), new Location(_$[$0-3],_$[$0-3]));
break;
case 33:
this.$ = new Variable(toHalf($$[$0], _$[$0]), null, new Location(_$[$0], _$[$0]));
break;
case 34:
this.$ = new UNDEFINED(yytext, new Location(_$[$0],_$[$0]));
break;
case 35:
this.$ = $$[$0-5].concat({varname:toHalf($$[$0-3], _$[$0-5]), parameter:new ArrayValue($$[$0-1], new Location(_$[$0-1],_$[$0-1]))});
break;
case 36:
this.$ = $$[$0-2].concat({varname:toHalf($$[$0], _$[$0-2])});
break;
case 37:
this.$ = [{varname:toHalf($$[$0-3], _$[$0-3]), parameter:new ArrayValue($$[$0-1], new Location(_$[$0-1],_$[$0-1]))}];
break;
case 38:
this.$ = [{varname:toHalf($$[$0], _$[$0])}];
break;
case 39:
this.$ = [new UNDEFINED(yytext, new Location(_$[$0],_$[$0]))];
break;
case 40:
this.$ = $$[$0-2].concat($$[$0]);
break;
case 41:
 this.$ = [$$[$0]];
break;
case 42: case 104:
 this.$ = [];
break;
case 43:
 if($$[$0] != null) this.$ = $$[$0-1].concat($$[$0]);
break;
case 44:
this.$ = [];
break;
case 60:
this.$ = null;
break;
case 61:
this.$ = new DumpStatement(new Location(_$[$0-1], _$[$0-1]));
break;
case 62:
this.$ = new DumpStatement(new Location(_$[$0-3], _$[$0-3]));
break;
case 63:
this.$ = new DefineStep($$[$0-8], $$[$0-6], $$[$0-2], new Location(_$[$0-9], _$[$0-1]));
break;
case 64:
this.$ = new DefineFunction($$[$0-8], $$[$0-6], $$[$0-2], new Location(_$[$0-9], _$[$0-1]));
break;
case 65:
this.$ = new ExitStatement(new Location(_$[$0-1],_$[$0-1]));
break;
case 66:
this.$ = [new runBeforeGetValue([$$[$0-2]], _$[$0-2]), new ReturnStatement($$[$0-2], new Location(_$[$0-2], _$[$0-1]))];
break;
case 67:
this.$ = [new runArgsBeforeGetValue([$$[$0-1]], _$[$0-2]), new DefinitionInt($$[$0-1], new Location(_$[$0-2],_$[$0-1]))];
break;
case 68:
this.$ = [new runArgsBeforeGetValue([$$[$0-1]], _$[$0-2]), new DefinitionFloat($$[$0-1], new Location(_$[$0-2],_$[$0-1]))];
break;
case 69:
this.$ = [new runArgsBeforeGetValue([$$[$0-1]], _$[$0-2]), new DefinitionString($$[$0-1], new Location(_$[$0-2],_$[$0-1]))];
break;
case 70:
this.$ = [new runArgsBeforeGetValue([$$[$0-1]], _$[$0-2]), new DefinitionBoolean($$[$0-1], new Location(_$[$0-2],_$[$0-1]))];
break;
case 71:
this.$ = [new runBeforeGetValue($$[$0-2], _$[$0-4]), new CallStep($$[$0-4], $$[$0-2], new Location(_$[$0-4],_$[$0-1]))];
break;
case 72:
this.$ = [new runBeforeGetValue([$$[$0-6]], _$[$0-7]), new If($$[$0-6],$$[$0-2],null, new Location(_$[$0-7], _$[$0-1]))];
break;
case 73:
this.$ = [new runBeforeGetValue([$$[$0-10]], _$[$0-11]), new If($$[$0-10],$$[$0-6],$$[$0-2], new Location(_$[$0-11], _$[$0-1]))];
break;
case 74:
this.$ = [new runBeforeGetValue([$$[$0-14], $$[$0-12]], _$[$0-14]), new ForInc($$[$0-14], $$[$0-12], $$[$0-10], $$[$0-8],$$[$0-2], new Location(_$[$0-14],_$[$0-1]))];
break;
case 75:
this.$ = [new runBeforeGetValue([$$[$0-14], $$[$0-12]], _$[$0-14]), new ForDec($$[$0-14], $$[$0-12], $$[$0-10], $$[$0-8],$$[$0-2], new Location(_$[$0-14],_$[$0-1]))];
break;
case 76:
this.$ = [new runBeforeGetValue([$$[$0-12], $$[$0-10]], _$[$0-12]), new ForInc($$[$0-12], $$[$0-10], $$[$0-8], new IntValue(1, new Location(_$[$0-12], _$[$0-12])),$$[$0-2], new Location(_$[$0-12],_$[$0-1]))];
break;
case 77:
this.$ = [new runBeforeGetValue([$$[$0-12], $$[$0-10]], _$[$0-12]), new ForDec($$[$0-12], $$[$0-10], $$[$0-8], new IntValue(1, new Location(_$[$0-12], _$[$0-12])),$$[$0-2], new Location(_$[$0-12],_$[$0-1]))];
break;
case 78:
this.$ = new While($$[$0-6], $$[$0-2], new Location(_$[$0-6], _$[$0-1]));
break;
case 79:
this.$ = [new runArgsBeforeGetValue([$$[$0-3]], _$[$0-3]), new runBeforeGetValue([$$[$0-1]], _$[$0-3]), new Assign($$[$0-3], $$[$0-1], new Location(_$[$0-3],_$[$0-1]))];
break;
case 80:
this.$ = [new runBeforeGetValue([$$[$0-2]], _$[$0-2]), new Output($$[$0-2], false, new Location(_$[$0-2],_$[$0-1]))];
break;
case 81:
this.$ = [new runBeforeGetValue([$$[$0-2]], _$[$0-2]), new Output($$[$0-2], true, new Location(_$[$0-2],_$[$0-1]))];
break;
case 82:
this.$ = new Newline(new Location(_$[$0-1], _$[$0-1]));
break;
case 83:
this.$ = [new runArgsBeforeGetValue([$$[$0-4]], _$[$0-4]), new Input($$[$0-4], typeOfValue.typeInt, new Location(_$[$0-4], _$[$0-1]))];
break;
case 84:
this.$ = [new runArgsBeforeGetValue([$$[$0-4]], _$[$0-4]), new Input($$[$0-4], typeOfValue.typeFloat, new Location(_$[$0-4], _$[$0-1]))];
break;
case 85:
this.$ = [new runArgsBeforeGetValue([$$[$0-4]], _$[$0-4]), new Input($$[$0-4], typeOfValue.typeString, new Location(_$[$0-4], _$[$0-1]))];
break;
case 86:
this.$ = [new runArgsBeforeGetValue([$$[$0-4]], _$[$0-4]), new Input($$[$0-4], typeOfValue.typeBoolean, new Location(_$[$0-4], _$[$0-1]))];
break;
case 87:
this.$ = [new runBeforeGetValue([$$[$0-4],$$[$0-2]], _$[$0-6]), new GraphicStatement('gOpenWindow', [$$[$0-4],$$[$0-2]], new Location(_$[$0-6], _$[$0-6]))];
break;
case 88:
this.$ = new GraphicStatement('gCloseWindow', [], new Location(_$[$0-3],_$[$0-3]));
break;
case 89:
this.$ = new GraphicStatement('gClearWindow', [], new Location(_$[$0-3],_$[$0-3]));
break;
case 90:
this.$ = [new runBeforeGetValue([$$[$0-6],$$[$0-4],$$[$0-2]], _$[$0-8]), new GraphicStatement('gSetLineColor', [$$[$0-6],$$[$0-4],$$[$0-2]], new Location(_$[$0-8], _$[$0-8]))];
break;
case 91:
this.$ = [new runBeforeGetValue([$$[$0-6],$$[$0-4],$$[$0-2]], _$[$0-8]), new GraphicStatement('gSetFillColor', [$$[$0-6],$$[$0-4],$$[$0-2]], new Location(_$[$0-8], _$[$0-8]))];
break;
case 92:
this.$ = [new runBeforeGetValue([$$[$0-2]], _$[$0-4]), new GraphicStatement('gSetLineWidth', [$$[$0-2]], new Location(_$[$0-4], _$[$0-4]))];
break;
case 93:
this.$ = [new runBeforeGetValue([$$[$0-2]], _$[$0-4]), new GraphicStatement('gSetFontSize', [$$[$0-2]], new Location(_$[$0-4], _$[$0-4]))];
break;
case 94:
this.$ = [new runBeforeGetValue([$$[$0-6],$$[$0-4],$$[$0-2]], _$[$0-8]), new GraphicStatement('gDrawText', [$$[$0-6],$$[$0-4],$$[$0-2]], new Location(_$[$0-8],_$[$0-8]))];
break;
case 95:
this.$ = [new runBeforeGetValue([$$[$0-8],$$[$0-6],$$[$0-4],$$[$0-2]], _$[$0-10]), new GraphicStatement('gDrawLine', [$$[$0-8],$$[$0-6],$$[$0-4],$$[$0-2]], new Location(_$[$0-10],_$[$0-10]))];
break;
case 96:
this.$ = [new runBeforeGetValue([$$[$0-8],$$[$0-6],$$[$0-4],$$[$0-2]], _$[$0-10]), new GraphicStatement('gDrawBox', [$$[$0-8],$$[$0-6],$$[$0-4],$$[$0-2]], new Location(_$[$0-10],_$[$0-10]))];
break;
case 97:
this.$ = [new runBeforeGetValue([$$[$0-8],$$[$0-6],$$[$0-4],$$[$0-2]], _$[$0-10]), new GraphicStatement('gFillBox', [$$[$0-8],$$[$0-6],$$[$0-4],$$[$0-2]], new Location(_$[$0-10],_$[$0-10]))];
break;
case 98:
this.$ = [new runBeforeGetValue([$$[$0-6],$$[$0-4],$$[$0-2]], _$[$0-8]), new GraphicStatement('gDrawCircle', [$$[$0-6],$$[$0-4],$$[$0-2]], new Location(_$[$0-8],_$[$0-8]))];
break;
case 99:
this.$ = [new runBeforeGetValue([$$[$0-6],$$[$0-4],$$[$0-2]], _$[$0-8]), new GraphicStatement('gFillCircle', [$$[$0-6],$$[$0-4],$$[$0-2]], new Location(_$[$0-8],_$[$0-8]))];
break;
case 100:
this.$ = [new runBeforeGetValue([$$[$0-2]], _$[$0-2]), new SleepStatement($$[$0-2], new Location(_$[$0-2], _$[$0-2]))];
break;
case 101:
this.$ = new BreakStatement(new Location(_$[$0-1],_$[$0-1]));
break;
case 102:
 typeof console !== 'undefined' ? console.log($$[$0-1]) : print($$[$0-1]);
	          return $$[$0-1]; 
break;
case 103:
 this.$ = $$[$0-1].concat($$[$0]);
break;
}
},
table: [o($V0,[2,104],{98:1,99:2}),{1:[3]},{3:28,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:$V9,29:$Va,30:$Vb,31:$Vc,33:27,34:$Vd,36:$Ve,38:$Vf,42:5,43:6,44:7,45:8,46:9,47:10,48:11,49:12,50:13,51:14,52:15,53:16,54:17,55:18,56:19,57:20,58:$Vg,59:$Vh,60:$Vi,63:$Vj,64:$Vk,66:$Vl,80:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,97:$VA,100:[1,3],101:4},{1:[2,102]},o($V0,[2,103]),o($V0,[2,105]),o($VB,[2,45]),o($VB,[2,46]),o($VB,[2,47]),o($VB,[2,48]),o($VB,[2,49]),o($VB,[2,50]),o($VB,[2,51]),o($VB,[2,52]),o($VB,[2,53]),o($VB,[2,54]),o($VB,[2,55]),o($VB,[2,56]),o($VB,[2,57]),o($VB,[2,58]),o($VB,[2,59]),o($VB,[2,60]),{10:$VC,31:$VD,38:$VE,39:59},{10:$VF,31:$VD,38:$VE,39:63},{10:$VG,31:$VD,38:$VE,39:65},{10:$VH,31:$VD,38:$VE,39:67},o([4,5,6,7,8,9,12,13,14,15,16,17,18,19,20,21,65,69,76,77,78,79,81,96],$VI,{10:[1,69],34:$VJ}),o($VK,$VL,{69:[1,73],77:[1,71],81:[1,72]}),{4:$VM,5:$VN,6:$VO,7:$VP,8:$VQ,9:$VR,12:$VS,13:$VT,14:$VU,15:$VV,16:$VW,17:$VX,18:$VY,19:$VZ,20:$V_,21:$V$,65:[1,78],76:[1,76],78:[1,74],79:[1,75],96:[1,77]},{58:[1,95]},{10:[1,96]},{10:[1,97]},{10:[1,98]},{10:[1,99]},{10:[1,100]},{10:[1,101]},{10:[1,102]},{10:[1,103]},{10:[1,104]},{10:[1,105]},{10:[1,106]},{10:[1,107]},{10:[1,108]},{3:109,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,33:115,34:$Vd,36:$Ve,38:$Vf},{31:[1,116]},{31:[1,117]},{58:[1,118]},{10:[1,120],58:[1,119]},{58:[1,121]},o($V51,[2,34]),{3:122,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,33:115,34:$Vd,36:$Ve,38:$Vf},{3:123,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,33:115,34:$Vd,36:$Ve,38:$Vf},o($V61,[2,19]),o($V61,[2,20]),o($V61,[2,21]),o($V61,[2,22]),o($V61,[2,23]),o($V71,$V81,{33:115,32:124,3:125,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,34:$Vd,36:$Ve,38:$Vf}),o([37,40],$V81,{33:115,3:125,32:126,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,34:$Vd,36:$Ve,38:$Vf}),{40:$V91,58:[1,127]},{3:129,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,33:115,34:$Vd,36:$Ve,38:$Vf},o($Va1,[2,38],{34:[1,130]}),o($Va1,[2,39]),{40:$V91,58:[1,131]},{3:132,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,33:115,34:$Vd,36:$Ve,38:$Vf},{40:$V91,58:[1,133]},{3:134,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,33:115,34:$Vd,36:$Ve,38:$Vf},{40:$V91,58:[1,135]},{3:136,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,33:115,34:$Vd,36:$Ve,38:$Vf},o($Vb1,$V81,{33:115,3:125,32:137,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,34:$Vd,36:$Ve,38:$Vf}),o($V71,$V81,{33:115,3:125,32:138,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,34:$Vd,36:$Ve,38:$Vf}),{3:139,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,33:115,34:$Vd,36:$Ve,38:$Vf},{27:[1,140],28:[1,141],29:[1,142],30:[1,143]},{3:144,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,33:115,34:$Vd,36:$Ve,38:$Vf},{58:[1,145]},{58:[1,146]},{61:[1,147]},{58:[1,148]},{58:[1,149]},{3:150,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,33:115,34:$Vd,36:$Ve,38:$Vf},{3:151,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,33:115,34:$Vd,36:$Ve,38:$Vf},{3:152,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,33:115,34:$Vd,36:$Ve,38:$Vf},{3:153,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,33:115,34:$Vd,36:$Ve,38:$Vf},{3:154,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,33:115,34:$Vd,36:$Ve,38:$Vf},{3:155,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,33:115,34:$Vd,36:$Ve,38:$Vf},{3:156,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,33:115,34:$Vd,36:$Ve,38:$Vf},{3:157,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,33:115,34:$Vd,36:$Ve,38:$Vf},{3:158,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,33:115,34:$Vd,36:$Ve,38:$Vf},{3:159,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,33:115,34:$Vd,36:$Ve,38:$Vf},{3:160,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,33:115,34:$Vd,36:$Ve,38:$Vf},{3:161,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,33:115,34:$Vd,36:$Ve,38:$Vf},{3:162,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,33:115,34:$Vd,36:$Ve,38:$Vf},{3:163,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,33:115,34:$Vd,36:$Ve,38:$Vf},o($V61,[2,17]),{3:164,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,33:115,34:$Vd,36:$Ve,38:$Vf},o($VB,[2,82]),{3:165,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,33:115,34:$Vd,36:$Ve,38:$Vf},{11:[1,166]},{11:[1,167]},{3:168,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,33:115,34:$Vd,36:$Ve,38:$Vf},{3:169,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,33:115,34:$Vd,36:$Ve,38:$Vf},{3:170,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,33:115,34:$Vd,36:$Ve,38:$Vf},{3:171,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,33:115,34:$Vd,36:$Ve,38:$Vf},{3:172,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,33:115,34:$Vd,36:$Ve,38:$Vf},{3:173,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,33:115,34:$Vd,36:$Ve,38:$Vf},{3:174,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,33:115,34:$Vd,36:$Ve,38:$Vf},{3:175,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,33:115,34:$Vd,36:$Ve,38:$Vf},{3:176,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,33:115,34:$Vd,36:$Ve,38:$Vf},{3:177,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,33:115,34:$Vd,36:$Ve,38:$Vf},{4:$VM,5:$VN,6:$VO,7:$VP,8:$VQ,9:$VR,12:$VS,13:$VT,14:$VU,15:$VV,16:$VW,17:$VX,18:$VY,19:$VZ,20:$V_,21:$V$,67:[1,178]},{10:$VC},{10:$VF},{10:$VG},{10:$VH},o($V61,$VI,{10:[1,179],34:$VJ}),o($V61,$VL),{10:[1,180]},{10:[1,181]},o($VB,[2,65]),o($VB,[2,61]),{11:[1,182]},o($VB,[2,101]),o($V61,[2,7]),{4:$VM,5:$VN,6:$VO,7:$VP,8:$VQ,9:$VR,11:[1,183],12:$VS,13:$VT,14:$VU,15:$VV,16:$VW,17:$VX,18:$VY,19:$VZ,20:$V_,21:$V$},{35:[1,184],40:$Vc1},o($Vd1,[2,41],{4:$VM,5:$VN,6:$VO,7:$VP,8:$VQ,9:$VR,12:$VS,13:$VT,14:$VU,15:$VV,16:$VW,17:$VX,18:$VY,19:$VZ,20:$V_,21:$V$}),{37:[1,186],40:$Vc1},o($VB,[2,67]),{31:[1,187]},{4:$VM,5:$VN,6:$VO,7:$VP,8:$VQ,9:$VR,11:[1,188],12:$VS,13:$VT,14:$VU,15:$VV,16:$VW,17:$VX,18:$VY,19:$VZ,20:$V_,21:$V$},o($V71,$V81,{33:115,3:125,32:189,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,34:$Vd,36:$Ve,38:$Vf}),o($VB,[2,68]),{4:$VM,5:$VN,6:$VO,7:$VP,8:$VQ,9:$VR,11:[1,190],12:$VS,13:$VT,14:$VU,15:$VV,16:$VW,17:$VX,18:$VY,19:$VZ,20:$V_,21:$V$},o($VB,[2,69]),{4:$VM,5:$VN,6:$VO,7:$VP,8:$VQ,9:$VR,11:[1,191],12:$VS,13:$VT,14:$VU,15:$VV,16:$VW,17:$VX,18:$VY,19:$VZ,20:$V_,21:$V$},o($VB,[2,70]),{4:$VM,5:$VN,6:$VO,7:$VP,8:$VQ,9:$VR,11:[1,192],12:$VS,13:$VT,14:$VU,15:$VV,16:$VW,17:$VX,18:$VY,19:$VZ,20:$V_,21:$V$},{11:[1,193],40:$Vc1},{35:[1,194],40:$Vc1},{4:$VM,5:$VN,6:$VO,7:$VP,8:$VQ,9:$VR,12:$VS,13:$VT,14:$VU,15:$VV,16:$VW,17:$VX,18:$VY,19:$VZ,20:$V_,21:$V$,58:[1,195]},{82:[1,196]},{82:[1,197]},{82:[1,198]},{82:[1,199]},{4:$VM,5:$VN,6:$VO,7:$VP,8:$VQ,9:$VR,12:$VS,13:$VT,14:$VU,15:$VV,16:$VW,17:$VX,18:$VY,19:$VZ,20:$V_,21:$V$,70:[1,200]},o($VB,[2,80]),o($VB,[2,81]),{58:[1,201]},o($VB,[2,100]),o($VB,[2,66]),o($Ve1,[2,1],{6:$VO,7:$VP,8:$VQ,9:$VR}),o($Ve1,[2,2],{6:$VO,7:$VP,8:$VQ,9:$VR}),o($V61,[2,3]),o($V61,[2,4]),o($V61,[2,5]),o($V61,[2,6]),o($Vf1,[2,9],{4:$VM,5:$VN,6:$VO,7:$VP,8:$VQ,9:$VR}),o($Vf1,[2,10],{4:$VM,5:$VN,6:$VO,7:$VP,8:$VQ,9:$VR}),o($Vf1,[2,11],{4:$VM,5:$VN,6:$VO,7:$VP,8:$VQ,9:$VR}),o($Vf1,[2,12],{4:$VM,5:$VN,6:$VO,7:$VP,8:$VQ,9:$VR}),o($Vf1,[2,13],{4:$VM,5:$VN,6:$VO,7:$VP,8:$VQ,9:$VR}),o($Vf1,[2,14],{4:$VM,5:$VN,6:$VO,7:$VP,8:$VQ,9:$VR}),o($Vg1,[2,15],{4:$VM,5:$VN,6:$VO,7:$VP,8:$VQ,9:$VR,12:$VS,13:$VT,14:$VU,15:$VV,16:$VW,17:$VX,20:$V_}),o($Vg1,[2,16],{4:$VM,5:$VN,6:$VO,7:$VP,8:$VQ,9:$VR,12:$VS,13:$VT,14:$VU,15:$VV,16:$VW,17:$VX,20:$V_}),o([11,21,35,37,40,58,65,67,70,71,72,76,78,79,96],[2,18],{4:$VM,5:$VN,6:$VO,7:$VP,8:$VQ,9:$VR,12:$VS,13:$VT,14:$VU,15:$VV,16:$VW,17:$VX,18:$VY,19:$VZ,20:$V_}),{4:$VM,5:$VN,6:$VO,7:$VP,8:$VQ,9:$VR,12:$VS,13:$VT,14:$VU,15:$VV,16:$VW,17:$VX,18:$VY,19:$VZ,20:$V_,21:$V$,40:[1,202]},{58:[1,203]},{58:[1,204]},{4:$VM,5:$VN,6:$VO,7:$VP,8:$VQ,9:$VR,12:$VS,13:$VT,14:$VU,15:$VV,16:$VW,17:$VX,18:$VY,19:$VZ,20:$V_,21:$V$,40:[1,205]},{4:$VM,5:$VN,6:$VO,7:$VP,8:$VQ,9:$VR,12:$VS,13:$VT,14:$VU,15:$VV,16:$VW,17:$VX,18:$VY,19:$VZ,20:$V_,21:$V$,40:[1,206]},{4:$VM,5:$VN,6:$VO,7:$VP,8:$VQ,9:$VR,11:[1,207],12:$VS,13:$VT,14:$VU,15:$VV,16:$VW,17:$VX,18:$VY,19:$VZ,20:$V_,21:$V$},{4:$VM,5:$VN,6:$VO,7:$VP,8:$VQ,9:$VR,11:[1,208],12:$VS,13:$VT,14:$VU,15:$VV,16:$VW,17:$VX,18:$VY,19:$VZ,20:$V_,21:$V$},{4:$VM,5:$VN,6:$VO,7:$VP,8:$VQ,9:$VR,12:$VS,13:$VT,14:$VU,15:$VV,16:$VW,17:$VX,18:$VY,19:$VZ,20:$V_,21:$V$,40:[1,209]},{4:$VM,5:$VN,6:$VO,7:$VP,8:$VQ,9:$VR,12:$VS,13:$VT,14:$VU,15:$VV,16:$VW,17:$VX,18:$VY,19:$VZ,20:$V_,21:$V$,40:[1,210]},{4:$VM,5:$VN,6:$VO,7:$VP,8:$VQ,9:$VR,12:$VS,13:$VT,14:$VU,15:$VV,16:$VW,17:$VX,18:$VY,19:$VZ,20:$V_,21:$V$,40:[1,211]},{4:$VM,5:$VN,6:$VO,7:$VP,8:$VQ,9:$VR,12:$VS,13:$VT,14:$VU,15:$VV,16:$VW,17:$VX,18:$VY,19:$VZ,20:$V_,21:$V$,40:[1,212]},{4:$VM,5:$VN,6:$VO,7:$VP,8:$VQ,9:$VR,12:$VS,13:$VT,14:$VU,15:$VV,16:$VW,17:$VX,18:$VY,19:$VZ,20:$V_,21:$V$,40:[1,213]},{4:$VM,5:$VN,6:$VO,7:$VP,8:$VQ,9:$VR,12:$VS,13:$VT,14:$VU,15:$VV,16:$VW,17:$VX,18:$VY,19:$VZ,20:$V_,21:$V$,40:[1,214]},{61:[1,215]},o($Vb1,$V81,{33:115,3:125,32:216,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,34:$Vd,36:$Ve,38:$Vf}),o($Vb1,$V81,{33:115,3:125,32:217,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,34:$Vd,36:$Ve,38:$Vf}),o($Vb1,$V81,{33:115,3:125,32:218,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,34:$Vd,36:$Ve,38:$Vf}),{58:[1,219]},o($V61,[2,8]),o($V61,[2,30]),{3:220,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,33:115,34:$Vd,36:$Ve,38:$Vf},o($V61,[2,31]),o($Va1,[2,36],{34:[1,221]}),o($V61,[2,24]),{35:[1,222],40:$Vc1},o($V61,[2,25]),o($V61,[2,26]),o($V61,[2,27]),o($VK,$Vh1,{58:[1,223]}),o($V51,[2,32]),o($VB,[2,79]),{58:[1,224]},{58:[1,225]},{58:[1,226]},{58:[1,227]},{3:228,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,33:115,34:$Vd,36:$Ve,38:$Vf},o($Vi1,$Vj1,{41:229}),{3:230,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,33:115,34:$Vd,36:$Ve,38:$Vf},o($VB,[2,88]),o($VB,[2,89]),{3:231,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,33:115,34:$Vd,36:$Ve,38:$Vf},{3:232,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,33:115,34:$Vd,36:$Ve,38:$Vf},{58:[1,233]},{58:[1,234]},{3:235,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,33:115,34:$Vd,36:$Ve,38:$Vf},{3:236,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,33:115,34:$Vd,36:$Ve,38:$Vf},{3:237,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,33:115,34:$Vd,36:$Ve,38:$Vf},{3:238,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,33:115,34:$Vd,36:$Ve,38:$Vf},{3:239,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,33:115,34:$Vd,36:$Ve,38:$Vf},{3:240,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,33:115,34:$Vd,36:$Ve,38:$Vf},{58:[1,241]},{11:[1,242],40:$Vc1},{11:[1,243],40:$Vc1},{11:[1,244],40:$Vc1},o($VB,[2,62]),o($Vd1,[2,40],{4:$VM,5:$VN,6:$VO,7:$VP,8:$VQ,9:$VR,12:$VS,13:$VT,14:$VU,15:$VV,16:$VW,17:$VX,18:$VY,19:$VZ,20:$V_,21:$V$}),o($V71,$V81,{33:115,3:125,32:245,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,34:$Vd,36:$Ve,38:$Vf}),o($Va1,[2,37]),o($VB,[2,71]),o($VB,[2,83]),o($VB,[2,84]),o($VB,[2,85]),o($VB,[2,86]),{4:$VM,5:$VN,6:$VO,7:$VP,8:$VQ,9:$VR,12:$VS,13:$VT,14:$VU,15:$VV,16:$VW,17:$VX,18:$VY,19:$VZ,20:$V_,21:$V$,71:[1,246]},{3:28,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:$V9,29:$Va,30:$Vb,31:$Vc,33:27,34:$Vd,36:$Ve,38:$Vf,42:248,43:6,44:7,45:8,46:9,47:10,48:11,49:12,50:13,51:14,52:15,53:16,54:17,55:18,56:19,57:20,58:$Vg,59:$Vh,60:$Vi,62:[1,247],63:$Vj,64:$Vk,66:$Vl,80:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,97:$VA},{4:$VM,5:$VN,6:$VO,7:$VP,8:$VQ,9:$VR,11:[1,249],12:$VS,13:$VT,14:$VU,15:$VV,16:$VW,17:$VX,18:$VY,19:$VZ,20:$V_,21:$V$},{4:$VM,5:$VN,6:$VO,7:$VP,8:$VQ,9:$VR,12:$VS,13:$VT,14:$VU,15:$VV,16:$VW,17:$VX,18:$VY,19:$VZ,20:$V_,21:$V$,40:[1,250]},{4:$VM,5:$VN,6:$VO,7:$VP,8:$VQ,9:$VR,12:$VS,13:$VT,14:$VU,15:$VV,16:$VW,17:$VX,18:$VY,19:$VZ,20:$V_,21:$V$,40:[1,251]},o($VB,[2,92]),o($VB,[2,93]),{4:$VM,5:$VN,6:$VO,7:$VP,8:$VQ,9:$VR,12:$VS,13:$VT,14:$VU,15:$VV,16:$VW,17:$VX,18:$VY,19:$VZ,20:$V_,21:$V$,40:[1,252]},{4:$VM,5:$VN,6:$VO,7:$VP,8:$VQ,9:$VR,12:$VS,13:$VT,14:$VU,15:$VV,16:$VW,17:$VX,18:$VY,19:$VZ,20:$V_,21:$V$,40:[1,253]},{4:$VM,5:$VN,6:$VO,7:$VP,8:$VQ,9:$VR,12:$VS,13:$VT,14:$VU,15:$VV,16:$VW,17:$VX,18:$VY,19:$VZ,20:$V_,21:$V$,40:[1,254]},{4:$VM,5:$VN,6:$VO,7:$VP,8:$VQ,9:$VR,12:$VS,13:$VT,14:$VU,15:$VV,16:$VW,17:$VX,18:$VY,19:$VZ,20:$V_,21:$V$,40:[1,255]},{4:$VM,5:$VN,6:$VO,7:$VP,8:$VQ,9:$VR,12:$VS,13:$VT,14:$VU,15:$VV,16:$VW,17:$VX,18:$VY,19:$VZ,20:$V_,21:$V$,40:[1,256]},{4:$VM,5:$VN,6:$VO,7:$VP,8:$VQ,9:$VR,12:$VS,13:$VT,14:$VU,15:$VV,16:$VW,17:$VX,18:$VY,19:$VZ,20:$V_,21:$V$,40:[1,257]},o($Vk1,$Vj1,{41:258}),o($V61,$Vh1),{61:[1,259]},{61:[1,260]},{35:[1,261],40:$Vc1},{3:262,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,33:115,34:$Vd,36:$Ve,38:$Vf,73:[1,263],75:[1,264]},{58:[1,265]},o($Vk1,[2,43]),{58:[1,266]},{3:267,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,33:115,34:$Vd,36:$Ve,38:$Vf},{3:268,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,33:115,34:$Vd,36:$Ve,38:$Vf},{3:269,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,33:115,34:$Vd,36:$Ve,38:$Vf},{3:270,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,33:115,34:$Vd,36:$Ve,38:$Vf},{3:271,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,33:115,34:$Vd,36:$Ve,38:$Vf},{3:272,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,33:115,34:$Vd,36:$Ve,38:$Vf},{3:273,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,33:115,34:$Vd,36:$Ve,38:$Vf},{3:274,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,33:115,34:$Vd,36:$Ve,38:$Vf},{3:28,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:$V9,29:$Va,30:$Vb,31:$Vc,33:27,34:$Vd,36:$Ve,38:$Vf,42:248,43:6,44:7,45:8,46:9,47:10,48:11,49:12,50:13,51:14,52:15,53:16,54:17,55:18,56:19,57:20,58:$Vg,59:$Vh,60:$Vi,62:[1,275],63:$Vj,64:$Vk,66:$Vl,68:[1,276],80:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,97:$VA},{58:[1,277]},{58:[1,278]},o($Va1,[2,35]),{4:$VM,5:$VN,6:$VO,7:$VP,8:$VQ,9:$VR,12:$VS,13:$VT,14:$VU,15:$VV,16:$VW,17:$VX,18:$VY,19:$VZ,20:$V_,21:$V$,72:[1,279]},{74:[1,280]},{74:[1,281]},o($VB,[2,78]),o($VB,[2,87]),{4:$VM,5:$VN,6:$VO,7:$VP,8:$VQ,9:$VR,11:[1,282],12:$VS,13:$VT,14:$VU,15:$VV,16:$VW,17:$VX,18:$VY,19:$VZ,20:$V_,21:$V$},{4:$VM,5:$VN,6:$VO,7:$VP,8:$VQ,9:$VR,11:[1,283],12:$VS,13:$VT,14:$VU,15:$VV,16:$VW,17:$VX,18:$VY,19:$VZ,20:$V_,21:$V$},{4:$VM,5:$VN,6:$VO,7:$VP,8:$VQ,9:$VR,11:[1,284],12:$VS,13:$VT,14:$VU,15:$VV,16:$VW,17:$VX,18:$VY,19:$VZ,20:$V_,21:$V$},{4:$VM,5:$VN,6:$VO,7:$VP,8:$VQ,9:$VR,12:$VS,13:$VT,14:$VU,15:$VV,16:$VW,17:$VX,18:$VY,19:$VZ,20:$V_,21:$V$,40:[1,285]},{4:$VM,5:$VN,6:$VO,7:$VP,8:$VQ,9:$VR,12:$VS,13:$VT,14:$VU,15:$VV,16:$VW,17:$VX,18:$VY,19:$VZ,20:$V_,21:$V$,40:[1,286]},{4:$VM,5:$VN,6:$VO,7:$VP,8:$VQ,9:$VR,12:$VS,13:$VT,14:$VU,15:$VV,16:$VW,17:$VX,18:$VY,19:$VZ,20:$V_,21:$V$,40:[1,287]},{4:$VM,5:$VN,6:$VO,7:$VP,8:$VQ,9:$VR,11:[1,288],12:$VS,13:$VT,14:$VU,15:$VV,16:$VW,17:$VX,18:$VY,19:$VZ,20:$V_,21:$V$},{4:$VM,5:$VN,6:$VO,7:$VP,8:$VQ,9:$VR,11:[1,289],12:$VS,13:$VT,14:$VU,15:$VV,16:$VW,17:$VX,18:$VY,19:$VZ,20:$V_,21:$V$},{58:[1,290]},{61:[1,291]},o($Vi1,$Vj1,{41:292}),o($Vi1,$Vj1,{41:293}),{73:[1,294],75:[1,295]},{61:[1,296]},{61:[1,297]},{58:[1,298]},{58:[1,299]},{58:[1,300]},{3:301,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,33:115,34:$Vd,36:$Ve,38:$Vf},{3:302,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,33:115,34:$Vd,36:$Ve,38:$Vf},{3:303,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,33:115,34:$Vd,36:$Ve,38:$Vf},{58:[1,304]},{58:[1,305]},o($VB,[2,72]),{58:[1,306]},{3:28,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:$V9,29:$Va,30:$Vb,31:$Vc,33:27,34:$Vd,36:$Ve,38:$Vf,42:248,43:6,44:7,45:8,46:9,47:10,48:11,49:12,50:13,51:14,52:15,53:16,54:17,55:18,56:19,57:20,58:$Vg,59:$Vh,60:$Vi,62:[1,307],63:$Vj,64:$Vk,66:$Vl,80:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,97:$VA},{3:28,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:$V9,29:$Va,30:$Vb,31:$Vc,33:27,34:$Vd,36:$Ve,38:$Vf,42:248,43:6,44:7,45:8,46:9,47:10,48:11,49:12,50:13,51:14,52:15,53:16,54:17,55:18,56:19,57:20,58:$Vg,59:$Vh,60:$Vi,62:[1,308],63:$Vj,64:$Vk,66:$Vl,80:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,97:$VA},{74:[1,309]},{74:[1,310]},{58:[1,311]},{58:[1,312]},o($VB,[2,90]),o($VB,[2,91]),o($VB,[2,94]),{4:$VM,5:$VN,6:$VO,7:$VP,8:$VQ,9:$VR,11:[1,313],12:$VS,13:$VT,14:$VU,15:$VV,16:$VW,17:$VX,18:$VY,19:$VZ,20:$V_,21:$V$},{4:$VM,5:$VN,6:$VO,7:$VP,8:$VQ,9:$VR,11:[1,314],12:$VS,13:$VT,14:$VU,15:$VV,16:$VW,17:$VX,18:$VY,19:$VZ,20:$V_,21:$V$},{4:$VM,5:$VN,6:$VO,7:$VP,8:$VQ,9:$VR,11:[1,315],12:$VS,13:$VT,14:$VU,15:$VV,16:$VW,17:$VX,18:$VY,19:$VZ,20:$V_,21:$V$},o($VB,[2,98]),o($VB,[2,99]),o($Vi1,$Vj1,{41:316}),{58:[1,317]},{58:[1,318]},{61:[1,319]},{61:[1,320]},o($Vi1,$Vj1,{41:321}),o($Vi1,$Vj1,{41:322}),{58:[1,323]},{58:[1,324]},{58:[1,325]},{3:28,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:$V9,29:$Va,30:$Vb,31:$Vc,33:27,34:$Vd,36:$Ve,38:$Vf,42:248,43:6,44:7,45:8,46:9,47:10,48:11,49:12,50:13,51:14,52:15,53:16,54:17,55:18,56:19,57:20,58:$Vg,59:$Vh,60:$Vi,62:[1,326],63:$Vj,64:$Vk,66:$Vl,80:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,97:$VA},o($VB,[2,63]),o($VB,[2,64]),{58:[1,327]},{58:[1,328]},{3:28,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:$V9,29:$Va,30:$Vb,31:$Vc,33:27,34:$Vd,36:$Ve,38:$Vf,42:248,43:6,44:7,45:8,46:9,47:10,48:11,49:12,50:13,51:14,52:15,53:16,54:17,55:18,56:19,57:20,58:$Vg,59:$Vh,60:$Vi,62:[1,329],63:$Vj,64:$Vk,66:$Vl,80:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,97:$VA},{3:28,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:$V9,29:$Va,30:$Vb,31:$Vc,33:27,34:$Vd,36:$Ve,38:$Vf,42:248,43:6,44:7,45:8,46:9,47:10,48:11,49:12,50:13,51:14,52:15,53:16,54:17,55:18,56:19,57:20,58:$Vg,59:$Vh,60:$Vi,62:[1,330],63:$Vj,64:$Vk,66:$Vl,80:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,97:$VA},o($VB,[2,95]),o($VB,[2,96]),o($VB,[2,97]),{58:[1,331]},o($Vi1,$Vj1,{41:332}),o($Vi1,$Vj1,{41:333}),{58:[1,334]},{58:[1,335]},o($VB,[2,73]),{3:28,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:$V9,29:$Va,30:$Vb,31:$Vc,33:27,34:$Vd,36:$Ve,38:$Vf,42:248,43:6,44:7,45:8,46:9,47:10,48:11,49:12,50:13,51:14,52:15,53:16,54:17,55:18,56:19,57:20,58:$Vg,59:$Vh,60:$Vi,62:[1,336],63:$Vj,64:$Vk,66:$Vl,80:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,97:$VA},{3:28,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:$V9,29:$Va,30:$Vb,31:$Vc,33:27,34:$Vd,36:$Ve,38:$Vf,42:248,43:6,44:7,45:8,46:9,47:10,48:11,49:12,50:13,51:14,52:15,53:16,54:17,55:18,56:19,57:20,58:$Vg,59:$Vh,60:$Vi,62:[1,337],63:$Vj,64:$Vk,66:$Vl,80:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,97:$VA},o($VB,[2,76]),o($VB,[2,77]),{58:[1,338]},{58:[1,339]},o($VB,[2,74]),o($VB,[2,75])],
defaultActions: {3:[2,102]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = yylineno + 1 + '行目に構文エラー：\n' + lexer.showPosition() + '\n\'' + (this.terminals_[symbol] || symbol) + '\'の近く（★のあたり）がおかしい';
                } else {
                    errStr = yylineno + 1 + '行目に構文エラー：\n予期しない' + (symbol == EOF ? 'プログラムの終わり' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	const typeOfValue=
	{
		typeInt:1,
		typeFloat:2,
		typeString:3,
		typeBoolean:4,
		typeArray:5
	};
	function toHalf(s, token)
	{
		if(setting.zenkaku_mode == 1)
		{
			if(/[Ａ-Ｚａ-ｚ０-９．−]/.exec(s))
				throw {message:token.first_line + "行目に全角文字が間違って使われています"};
		}
		return s.replace(/[Ａ-Ｚａ-ｚ０-９．−]/g, function(s) {
			return String.fromCharCode(s.charCodeAt(0) - 0xFEE0);}
		);
	}
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var re = /■/g;
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
//        return pre + this.upcomingInput() + "\n" + c + "^";
        return pre.replace(re,'') + '★' + this.upcomingInput().replace(re, '') + '...\n';
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        if(match[0].match(/^■$/)) this.yylineno--; // added
        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError((this.yylineno + 1) + '行目にエラー。\n★の近くに不明なテキスト。\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 30;
break;
case 1:return 25;
break;
case 2:return 25;
break;
case 3:return 25;
break;
case 4:return 26;
break;
case 5:return 26;
break;
case 6:return 26;
break;
case 7:return 24;
break;
case 8:return 23;
break;
case 9:return 22;
break;
case 10:return 40;
break;
case 11:return 61
break;
case 12:return 38;
break;
case 13:return 4;
break;
case 14:return 4;
break;
case 15:return 5;
break;
case 16:return 5;
break;
case 17:return 5;
break;
case 18:return 6;
break;
case 19:return 6;
break;
case 20:return 6;
break;
case 21:return 8
break;
case 22:return 8
break;
case 23:return 7;
break;
case 24:return 7;
break;
case 25:return 8;
break;
case 26:return 7;
break;
case 27:return 9;
break;
case 28:return 9;
break;
case 29:return 10;
break;
case 30:return 11;
break;
case 31:return 10;
break;
case 32:return 11;
break;
case 33:return 34;
break;
case 34:return 35;
break;
case 35:return 34;
break;
case 36:return 35;
break;
case 37:return 36;
break;
case 38:return 37;
break;
case 39:return 36;
break;
case 40:return 37;
break;
case 41:return 16;
break;
case 42:return 17;
break;
case 43:return 16;
break;
case 44:return 17;
break;
case 45:return 16;
break;
case 46:return 17;
break;
case 47:return 14;
break;
case 48:return 15;
break;
case 49:return 14;
break;
case 50:return 15;
break;
case 51:return 12
break;
case 52:return 12;
break;
case 53:return 12;
break;
case 54:return 12;
break;
case 55:return 13;
break;
case 56:return 13;
break;
case 57:return 13;
break;
case 58:return 77;
break;
case 59:return 18;
break;
case 60:return 19;
break;
case 61:return 20;
break;
case 62:return 62
break;
case 63:return 79;
break;
case 64:return 78;
break;
case 65:return 78;
break;
case 66:return 82;
break;
case 67:return 66;
break;
case 68:return 67;
break;
case 69:return 68;
break;
case 70:return 76;
break;
case 71:return 76;
break;
case 72:return 97;
break;
case 73:return 97;
break;
case 74:return 97;
break;
case 75:return 64;
break;
case 76:return 60;
break;
case 77:return 63;
break;
case 78:return 65;
break;
case 79:return 81;
break;
case 80:return 69;
break;
case 81:return 70;
break;
case 82:return 71;
break;
case 83:return 72;
break;
case 84:return 73;
break;
case 85:return 75;
break;
case 86:return 73;
break;
case 87:return 75;
break;
case 88:return 74;
break;
case 89:return 74;
break;
case 90:return 27;
break;
case 91:return 28;
break;
case 92:return 29;
break;
case 93:return 21;
break;
case 94:return 21;
break;
case 95:return 83;
break;
case 96:return 84;
break;
case 97:return 85;
break;
case 98:return 86;
break;
case 99:return 87;
break;
case 100:return 88;
break;
case 101:return 89;
break;
case 102:return 90;
break;
case 103:return 91;
break;
case 104:return 92;
break;
case 105:return 93;
break;
case 106:return 94;
break;
case 107:return 95;
break;
case 108:return 96;
break;
case 109:return 59;
break;
case 110:return 80;
break;
case 111:return 31;
break;
case 112:return 100;
break;
case 113:return 58;
break;
case 114:/* skip whitespace */
break;
}
},
rules: [/^(?:真偽)/,/^(?:true\b)/,/^(?:TRUE\b)/,/^(?:真)/,/^(?:false\b)/,/^(?:FALSE\b)/,/^(?:偽)/,/^(?:(「[^」]*」|｢[^｣]*｣|"[^"]*"))/,/^(?:(([0０]|(([1-9１-９])([0-9０-９])*))[.．]([0-9０-９])+))/,/^(?:([0０]|(([1-9１-９])([0-9０-９])*)))/,/^(?:([，,、]))/,/^(?:([:：]))/,/^(?:(《[^》]*》))/,/^(?:\+)/,/^(?:＋)/,/^(?:-)/,/^(?:ー)/,/^(?:−)/,/^(?:\*)/,/^(?:＊)/,/^(?:✕)/,/^(?:\/\/)/,/^(?:／／)/,/^(?:\/)/,/^(?:／)/,/^(?:÷÷)/,/^(?:÷)/,/^(?:%)/,/^(?:％)/,/^(?:\()/,/^(?:\))/,/^(?:（)/,/^(?:）)/,/^(?:\[)/,/^(?:\])/,/^(?:［)/,/^(?:］)/,/^(?:\{)/,/^(?:\})/,/^(?:｛)/,/^(?:｝)/,/^(?:>=)/,/^(?:<=)/,/^(?:≧)/,/^(?:≦)/,/^(?:＞＝)/,/^(?:＜＝)/,/^(?:>)/,/^(?:<)/,/^(?:＞)/,/^(?:＜)/,/^(?:==)/,/^(?:=)/,/^(?:＝＝)/,/^(?:＝)/,/^(?:!=)/,/^(?:≠)/,/^(?:！＝)/,/^(?:←)/,/^(?:かつ)/,/^(?:または)/,/^(?:でない)/,/^(?:■)/,/^(?:を(表示|印刷|出力)する)/,/^(?:を改行無しで(表示|印刷|出力)する)/,/^(?:を改行なしで(表示|印刷|出力)する)/,/^(?:を入力する)/,/^(?:もし)/,/^(?:ならば)/,/^(?:そうでなければ)/,/^(?:の間繰り返す)/,/^(?:の間繰返す)/,/^(?:繰り返しを抜ける)/,/^(?:繰返しを抜ける)/,/^(?:くりかえしを抜ける)/,/^(?:手続きを抜ける)/,/^(?:手続き)/,/^(?:関数)/,/^(?:を返す)/,/^(?:に)/,/^(?:を)/,/^(?:から)/,/^(?:まで)/,/^(?:ずつ)/,/^(?:増やしながら)/,/^(?:減らしながら)/,/^(?:増やしつつ)/,/^(?:減らしつつ)/,/^(?:繰り返す)/,/^(?:繰返す)/,/^(?:整数)/,/^(?:実数)/,/^(?:文字列)/,/^(?:と([，,、]))/,/^(?:と)/,/^(?:描画領域開く)/,/^(?:描画領域閉じる)/,/^(?:描画領域全消去)/,/^(?:線色設定)/,/^(?:塗色設定)/,/^(?:線太さ設定)/,/^(?:文字サイズ設定)/,/^(?:文字描画)/,/^(?:線描画)/,/^(?:矩形描画)/,/^(?:矩形塗描画)/,/^(?:円描画)/,/^(?:円塗描画)/,/^(?:ミリ秒待つ)/,/^(?:変数を確認する)/,/^(?:改行する)/,/^(?:(([a-zA-Zａ-ｚＡ-Ｚ])([a-zA-Z0-9ａ-ｚＡ-Ｚ０-９])*))/,/^(?:$)/,/^(?:(\r\n|\r|\n))/,/^(?:([\s\t 　]))/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = dncl;
exports.Parser = dncl.Parser;
exports.parse = function () { return dncl.parse.apply(dncl, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}