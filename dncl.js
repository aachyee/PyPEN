/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var dncl = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[5,10,22,23,24,25,26,27,28,29,30,31,34,36,38,57,58,59,62,63,65,79,81,82,83,84,85,86,87,88,89,90,91,92,93,97],$V1=[1,48],$V2=[1,49],$V3=[1,50],$V4=[1,51],$V5=[1,52],$V6=[1,53],$V7=[1,54],$V8=[1,21],$V9=[1,22],$Va=[1,23],$Vb=[1,24],$Vc=[1,25],$Vd=[1,55],$Ve=[1,56],$Vf=[1,47],$Vg=[1,20],$Vh=[1,46],$Vi=[1,43],$Vj=[1,44],$Vk=[1,45],$Vl=[1,42],$Vm=[1,28],$Vn=[1,29],$Vo=[1,30],$Vp=[1,31],$Vq=[1,32],$Vr=[1,33],$Vs=[1,34],$Vt=[1,35],$Vu=[1,36],$Vv=[1,37],$Vw=[1,38],$Vx=[1,39],$Vy=[1,40],$Vz=[1,41],$VA=[5,10,22,23,24,25,26,27,28,29,30,31,34,36,38,57,58,59,61,62,63,65,67,79,81,82,83,84,85,86,87,88,89,90,91,92,93,97],$VB=[1,58],$VC=[1,59],$VD=[1,60],$VE=[1,62],$VF=[1,64],$VG=[1,66],$VH=[2,33],$VI=[1,68],$VJ=[4,5,6,7,8,9,12,13,14,15,16,17,18,19,20,21,64,75,77,78,94],$VK=[2,29],$VL=[1,77],$VM=[1,78],$VN=[1,79],$VO=[1,80],$VP=[1,81],$VQ=[1,82],$VR=[1,83],$VS=[1,84],$VT=[1,85],$VU=[1,86],$VV=[1,87],$VW=[1,88],$VX=[1,89],$VY=[1,90],$VZ=[1,91],$V_=[1,92],$V$=[1,108],$V01=[1,109],$V11=[1,110],$V21=[1,111],$V31=[1,112],$V41=[4,5,6,7,8,9,11,12,13,14,15,16,17,18,19,20,21,35,37,40,57,64,66,68,69,70,71,75,76,77,78,80,94],$V51=[4,5,6,7,8,9,11,12,13,14,15,16,17,18,19,20,21,35,37,40,57,64,66,69,70,71,75,77,78,94],$V61=[35,40],$V71=[2,42],$V81=[1,125],$V91=[40,57],$Va1=[11,40],$Vb1=[1,179],$Vc1=[11,35,37,40],$Vd1=[4,5,11,12,13,14,15,16,17,18,19,20,21,35,37,40,57,64,66,69,70,71,75,77,78,94],$Ve1=[11,18,19,20,21,35,37,40,57,64,66,69,70,71,75,77,78,94],$Vf1=[2,28],$Vg1=[5,10,22,23,24,25,26,27,28,29,30,31,34,36,38,57,58,59,61,62,63,65,79,81,82,83,84,85,86,87,88,89,90,91,92,93],$Vh1=[2,44],$Vi1=[5,10,22,23,24,25,26,27,28,29,30,31,34,36,38,57,58,59,61,62,63,65,67,79,81,82,83,84,85,86,87,88,89,90,91,92,93];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"e":3,"+":4,"-":5,"*":6,"/":7,"//":8,"%":9,"(":10,")":11,"=":12,"!=":13,">":14,"<":15,">=":16,"<=":17,"かつ":18,"または":19,"でない":20,"と":21,"整数値":22,"実数値":23,"文字列値":24,"TRUE":25,"FALSE":26,"整数":27,"実数":28,"文字列":29,"真偽":30,"識別子":31,"args":32,"variable":33,"[":34,"]":35,"{":36,"}":37,"UNDEFINED":38,"variablelist":39,"COMMA":40,"statementlist":41,"statement":42,"EmptyStatement":43,"DefineStatement":44,"CallStatement":45,"AssignStatement":46,"PrintStatement":47,"InputStatement":48,"GraphicStatement":49,"ForStatement":50,"WhileStatement":51,"IfStatement":52,"SleepStatement":53,"DefineFuncStatement":54,"ReturnStatement":55,"DumpStatement":56,"改行":57,"変数を確認する":58,"手続き":59,":":60,"EOB":61,"関数":62,"手続きを抜ける":63,"を返す":64,"もし":65,"ならば":66,"そうでなければ":67,"を":68,"から":69,"まで":70,"ずつ":71,"増やしながら":72,"繰り返す":73,"減らしながら":74,"の間繰返す":75,"←":76,"を改行無しで表示する":77,"を表示する":78,"改行する":79,"を入力する":80,"gOpenWindow":81,"gCloseWindow":82,"gClearWindow":83,"gSetLineColor":84,"gSetFillColor":85,"gSetLineWidth":86,"gSetFontSize":87,"gDrawText":88,"gDrawLine":89,"gDrawBox":90,"gFillBox":91,"gDrawCircle":92,"gFillCircle":93,"ミリ秒待つ":94,"Program":95,"SourceElements":96,"EOF":97,"SourceElement":98,"$accept":0,"$end":1},
terminals_: {2:"error",4:"+",5:"-",6:"*",7:"/",8:"//",9:"%",10:"(",11:")",12:"=",13:"!=",14:">",15:"<",16:">=",17:"<=",18:"かつ",19:"または",20:"でない",21:"と",22:"整数値",23:"実数値",24:"文字列値",25:"TRUE",26:"FALSE",27:"整数",28:"実数",29:"文字列",30:"真偽",31:"識別子",34:"[",35:"]",36:"{",37:"}",38:"UNDEFINED",40:"COMMA",57:"改行",58:"変数を確認する",59:"手続き",60:":",61:"EOB",62:"関数",63:"手続きを抜ける",64:"を返す",65:"もし",66:"ならば",67:"そうでなければ",68:"を",69:"から",70:"まで",71:"ずつ",72:"増やしながら",73:"繰り返す",74:"減らしながら",75:"の間繰返す",76:"←",77:"を改行無しで表示する",78:"を表示する",79:"改行する",80:"を入力する",81:"gOpenWindow",82:"gCloseWindow",83:"gClearWindow",84:"gSetLineColor",85:"gSetFillColor",86:"gSetLineWidth",87:"gSetFontSize",88:"gDrawText",89:"gDrawLine",90:"gDrawBox",91:"gFillBox",92:"gDrawCircle",93:"gFillCircle",94:"ミリ秒待つ",97:"EOF"},
productions_: [0,[3,3],[3,3],[3,3],[3,3],[3,3],[3,3],[3,2],[3,3],[3,3],[3,3],[3,3],[3,3],[3,3],[3,3],[3,3],[3,3],[3,2],[3,3],[3,1],[3,1],[3,1],[3,1],[3,1],[3,4],[3,4],[3,4],[3,4],[3,4],[3,1],[3,3],[3,3],[33,4],[33,1],[33,1],[39,6],[39,3],[39,4],[39,1],[39,1],[32,3],[32,1],[32,0],[41,2],[41,0],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[43,1],[56,2],[56,4],[54,10],[54,10],[55,2],[55,3],[44,3],[44,3],[44,3],[44,3],[45,5],[52,8],[52,12],[50,15],[50,15],[50,13],[50,13],[51,7],[46,4],[47,3],[47,3],[47,2],[48,3],[49,7],[49,4],[49,4],[49,9],[49,9],[49,5],[49,5],[49,9],[49,11],[49,11],[49,11],[49,9],[49,9],[53,3],[95,2],[96,2],[96,0],[98,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$ = new Add($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 2:
this.$ = new Sub($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 3:
this.$ = new Mul($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 4:
this.$ = new Div($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 5:
this.$ = new DivInt($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 6:
this.$ = new Mod($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 7:
 this.$ = new Minus($$[$0], new Location(_$[$0], _$[$0]));
break;
case 8:
this.$ = $$[$0-1];
break;
case 9:
this.$ = new EQ($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 10:
this.$ = new NE($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 11:
this.$ = new GT($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 12:
this.$ = new LT($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 13:
this.$ = new GE($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 14:
this.$ = new LE($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 15:
this.$ = new And($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 16:
this.$ = new Or($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 17:
this.$ = new Not($$[$0-1], new Location(_$[$0-1], _$[$0-1]));
break;
case 18:
this.$ = new Append($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 19:
this.$ = new IntValue(Number(toHalf(yytext,_$[$0])), new Location(_$[$0],_$[$0]));
break;
case 20:
this.$ = new FloatValue(Number(toHalf(yytext,_$[$0])), new Location(_$[$0],_$[$0]));
break;
case 21:
this.$ = new StringValue(yytext.substring(1, yytext.length - 1), new Location(_$[$0], _$[$0]));
break;
case 22:
this.$ = new BooleanValue(true, new Location(_$[$0],_$[$0]));
break;
case 23:
this.$ = new BooleanValue(false, new Location(_$[$0],_$[$0]));
break;
case 24:
this.$ = new ConvertInt($$[$0-1], new Location(_$[$0-3], _$[$0]));
break;
case 25:
this.$ = new ConvertFloat($$[$0-1], new Location(_$[$0-3], _$[$0]));
break;
case 26:
this.$ = new ConvertString($$[$0-1], new Location(_$[$0-3], _$[$0]));
break;
case 27:
this.$ = new ConvertBool($$[$0-1], new Location(_$[$0-3], _$[$0]));
break;
case 28:
this.$ = new CallFunction($$[$0-3], $$[$0-1], new Location(_$[$0-3],_$[$0-3]));
break;
case 29:
this.$ = $$[$0];
break;
case 30: case 31:
this.$ = new ArrayValue($$[$0-1], new Location(_$[$0-2], _$[$0]));
break;
case 32:
this.$ = new Variable(toHalf($$[$0-3], _$[$0-3]), new ArrayValue($$[$0-1]), new Location(_$[$0-3],_$[$0-3]));
break;
case 33:
this.$ = new Variable(toHalf($$[$0], _$[$0]), null, new Location(_$[$0], _$[$0]));
break;
case 34:
this.$ = new UNDEFINED(yytext, new Location(_$[$0],_$[$0]));
break;
case 35:
this.$ = $$[$0-5].concat({varname:toHalf($$[$0-3], _$[$0-5]), parameter:new ArrayValue($$[$0-1], new Location(_$[$0-1],_$[$0-1]))});
break;
case 36:
this.$ = $$[$0-2].concat({varname:toHalf($$[$0], _$[$0-2])});
break;
case 37:
this.$ = [{varname:toHalf($$[$0-3], _$[$0-3]), parameter:new ArrayValue($$[$0-1], new Location(_$[$0-1],_$[$0-1]))}];
break;
case 38:
this.$ = [{varname:toHalf($$[$0], _$[$0])}];
break;
case 39:
this.$ = [new UNDEFINED(yytext, new Location(_$[$0],_$[$0]))];
break;
case 40:
this.$ = $$[$0-2].concat($$[$0]);
break;
case 41:
 this.$ = [$$[$0]];
break;
case 42: case 99:
 this.$ = [];
break;
case 43:
 if($$[$0] != null) this.$ = $$[$0-1].concat($$[$0]);
break;
case 44:
this.$ = [];
break;
case 59:
this.$ = null;
break;
case 60:
this.$ = new DumpStatement(new Location(_$[$0-1], _$[$0-1]));
break;
case 61:
this.$ = new DumpStatement(new Location(_$[$0-3], _$[$0-3]));
break;
case 62:
this.$ = new DefineStep($$[$0-8], $$[$0-6], $$[$0-2], new Location(_$[$0-9], _$[$0-1]));
break;
case 63:
this.$ = new DefineFunction($$[$0-8], $$[$0-6], $$[$0-2], new Location(_$[$0-9], _$[$0-1]));
break;
case 64:
this.$ = new ExitStatement(new Location(_$[$0-1],_$[$0-1]));
break;
case 65:
this.$ = [new runBeforeGetValue([$$[$0-2]], _$[$0-2]), new ReturnStatement($$[$0-2], new Location(_$[$0-2], _$[$0-1]))];
break;
case 66:
this.$ = [new runArgsBeforeGetValue([$$[$0-1]], _$[$0-2]), new DefinitionInt($$[$0-1], new Location(_$[$0-2],_$[$0-1]))];
break;
case 67:
this.$ = [new runArgsBeforeGetValue([$$[$0-1]], _$[$0-2]), new DefinitionFloat($$[$0-1], new Location(_$[$0-2],_$[$0-1]))];
break;
case 68:
this.$ = [new runArgsBeforeGetValue([$$[$0-1]], _$[$0-2]), new DefinitionString($$[$0-1], new Location(_$[$0-2],_$[$0-1]))];
break;
case 69:
this.$ = [new runArgsBeforeGetValue([$$[$0-1]], _$[$0-2]), new DefinitionBoolean($$[$0-1], new Location(_$[$0-2],_$[$0-1]))];
break;
case 70:
this.$ = [new runBeforeGetValue($$[$0-2], _$[$0-4]), new CallStep($$[$0-4], $$[$0-2], new Location(_$[$0-4],_$[$0-1]))];
break;
case 71:
this.$ = [new runBeforeGetValue([$$[$0-6]], _$[$0-7]), new If($$[$0-6],$$[$0-2],null, new Location(_$[$0-7], _$[$0-1]))];
break;
case 72:
this.$ = [new runBeforeGetValue([$$[$0-10]], _$[$0-11]), new If($$[$0-10],$$[$0-6],$$[$0-2], new Location(_$[$0-11], _$[$0-1]))];
break;
case 73:
this.$ = new ForInc($$[$0-14], $$[$0-12], $$[$0-10], $$[$0-8],$$[$0-2], new Location(_$[$0-14],_$[$0-1]));
break;
case 74:
this.$ = new ForDec($$[$0-14], $$[$0-12], $$[$0-10], $$[$0-8],$$[$0-2], new Location(_$[$0-14],_$[$0-1]));
break;
case 75:
this.$ = new ForInc($$[$0-12], $$[$0-10], $$[$0-8], new IntValue(1, new Location(_$[$0-12], _$[$0-12])),$$[$0-2], new Location(_$[$0-12],_$[$0-1]));
break;
case 76:
this.$ = new ForDec($$[$0-12], $$[$0-10], $$[$0-8], new IntValue(1, new Location(_$[$0-12], _$[$0-12])),$$[$0-2], new Location(_$[$0-12],_$[$0-1]));
break;
case 77:
this.$ = new While($$[$0-6], $$[$0-2], new Location(_$[$0-6], _$[$0-1]));
break;
case 78:
this.$ = [new runArgsBeforeGetValue([$$[$0-3]], _$[$0-3]), new runBeforeGetValue([$$[$0-1]], _$[$0-3]), new Assign($$[$0-3], $$[$0-1], new Location(_$[$0-3],_$[$0-1]))];
break;
case 79:
this.$ = [new runBeforeGetValue([$$[$0-2]], _$[$0-2]), new Output($$[$0-2], false, new Location(_$[$0-2],_$[$0-1]))];
break;
case 80:
this.$ = [new runBeforeGetValue([$$[$0-2]], _$[$0-2]), new Output($$[$0-2], true, new Location(_$[$0-2],_$[$0-1]))];
break;
case 81:
this.$ = new Newline(new Location(_$[$0-1], _$[$0-1]));
break;
case 82:
this.$ = [new runArgsBeforeGetValue([$$[$0-2]], _$[$0-2]), new Input($$[$0-2], new Location(_$[$0-2], _$[$0-1]))];
break;
case 83:
this.$ = [new runBeforeGetValue([$$[$0-4],$$[$0-2]], _$[$0-6]), new GraphicStatement('gOpenWindow', [$$[$0-4],$$[$0-2]], new Location(_$[$0-6], _$[$0-6]))];
break;
case 84:
this.$ = new GraphicStatement('gCloseWindow', [], new Location(_$[$0-3],_$[$0-3]));
break;
case 85:
this.$ = new GraphicStatement('gClearWindow', [], new Location(_$[$0-3],_$[$0-3]));
break;
case 86:
this.$ = [new runBeforeGetValue([$$[$0-6],$$[$0-4],$$[$0-2]], _$[$0-8]), new GraphicStatement('gSetLineColor', [$$[$0-6],$$[$0-4],$$[$0-2]], new Location(_$[$0-8], _$[$0-8]))];
break;
case 87:
this.$ = [new runBeforeGetValue([$$[$0-6],$$[$0-4],$$[$0-2]], _$[$0-8]), new GraphicStatement('gSetFillColor', [$$[$0-6],$$[$0-4],$$[$0-2]], new Location(_$[$0-8], _$[$0-8]))];
break;
case 88:
this.$ = [new runBeforeGetValue([$$[$0-2]], _$[$0-4]), new GraphicStatement('gSetLineWidth', [$$[$0-2]], new Location(_$[$0-4], _$[$0-4]))];
break;
case 89:
this.$ = [new runBeforeGetValue([$$[$0-2]], _$[$0-4]), new GraphicStatement('gSetFontSize', [$$[$0-2]], new Location(_$[$0-4], _$[$0-4]))];
break;
case 90:
this.$ = [new runBeforeGetValue([$$[$0-6],$$[$0-4],$$[$0-2]], _$[$0-8]), new GraphicStatement('gDrawText', [$$[$0-6],$$[$0-4],$$[$0-2]], new Location(_$[$0-8],_$[$0-8]))];
break;
case 91:
this.$ = [new runBeforeGetValue([$$[$0-8],$$[$0-6],$$[$0-4],$$[$0-2]], _$[$0-10]), new GraphicStatement('gDrawLine', [$$[$0-8],$$[$0-6],$$[$0-4],$$[$0-2]], new Location(_$[$0-10],_$[$0-10]))];
break;
case 92:
this.$ = [new runBeforeGetValue([$$[$0-8],$$[$0-6],$$[$0-4],$$[$0-2]], _$[$0-10]), new GraphicStatement('gDrawBox', [$$[$0-8],$$[$0-6],$$[$0-4],$$[$0-2]], new Location(_$[$0-10],_$[$0-10]))];
break;
case 93:
this.$ = [new runBeforeGetValue([$$[$0-8],$$[$0-6],$$[$0-4],$$[$0-2]], _$[$0-10]), new GraphicStatement('gFillBox', [$$[$0-8],$$[$0-6],$$[$0-4],$$[$0-2]], new Location(_$[$0-10],_$[$0-10]))];
break;
case 94:
this.$ = [new runBeforeGetValue([$$[$0-6],$$[$0-4],$$[$0-2]], _$[$0-8]), new GraphicStatement('gDrawCircle', [$$[$0-6],$$[$0-4],$$[$0-2]], new Location(_$[$0-8],_$[$0-8]))];
break;
case 95:
this.$ = [new runBeforeGetValue([$$[$0-6],$$[$0-4],$$[$0-2]], _$[$0-8]), new GraphicStatement('gFillCircle', [$$[$0-6],$$[$0-4],$$[$0-2]], new Location(_$[$0-8],_$[$0-8]))];
break;
case 96:
this.$ = [new runBeforeGetValue([$$[$0-2]], _$[$0-2]), new SleepStatement($$[$0-2], new Location(_$[$0-2], _$[$0-2]))];
break;
case 97:
 typeof console !== 'undefined' ? console.log($$[$0-1]) : print($$[$0-1]);
	          return $$[$0-1]; 
break;
case 98:
 this.$ = $$[$0-1].concat($$[$0]);
break;
}
},
table: [o($V0,[2,99],{95:1,96:2}),{1:[3]},{3:27,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:$V9,29:$Va,30:$Vb,31:$Vc,33:26,34:$Vd,36:$Ve,38:$Vf,42:5,43:6,44:7,45:8,46:9,47:10,48:11,49:12,50:13,51:14,52:15,53:16,54:17,55:18,56:19,57:$Vg,58:$Vh,59:$Vi,62:$Vj,63:$Vk,65:$Vl,79:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,97:[1,3],98:4},{1:[2,97]},o($V0,[2,98]),o($V0,[2,100]),o($VA,[2,45]),o($VA,[2,46]),o($VA,[2,47]),o($VA,[2,48]),o($VA,[2,49]),o($VA,[2,50]),o($VA,[2,51]),o($VA,[2,52]),o($VA,[2,53]),o($VA,[2,54]),o($VA,[2,55]),o($VA,[2,56]),o($VA,[2,57]),o($VA,[2,58]),o($VA,[2,59]),{10:$VB,31:$VC,38:$VD,39:57},{10:$VE,31:$VC,38:$VD,39:61},{10:$VF,31:$VC,38:$VD,39:63},{10:$VG,31:$VC,38:$VD,39:65},o([4,5,6,7,8,9,12,13,14,15,16,17,18,19,20,21,64,68,75,76,77,78,80,94],$VH,{10:[1,67],34:$VI}),o($VJ,$VK,{68:[1,71],76:[1,69],80:[1,70]}),{4:$VL,5:$VM,6:$VN,7:$VO,8:$VP,9:$VQ,12:$VR,13:$VS,14:$VT,15:$VU,16:$VV,17:$VW,18:$VX,19:$VY,20:$VZ,21:$V_,64:[1,76],75:[1,74],77:[1,72],78:[1,73],94:[1,75]},{57:[1,93]},{10:[1,94]},{10:[1,95]},{10:[1,96]},{10:[1,97]},{10:[1,98]},{10:[1,99]},{10:[1,100]},{10:[1,101]},{10:[1,102]},{10:[1,103]},{10:[1,104]},{10:[1,105]},{10:[1,106]},{3:107,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V$,28:$V01,29:$V11,30:$V21,31:$V31,33:113,34:$Vd,36:$Ve,38:$Vf},{31:[1,114]},{31:[1,115]},{57:[1,116]},{10:[1,118],57:[1,117]},o($V41,[2,34]),{3:119,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V$,28:$V01,29:$V11,30:$V21,31:$V31,33:113,34:$Vd,36:$Ve,38:$Vf},{3:120,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V$,28:$V01,29:$V11,30:$V21,31:$V31,33:113,34:$Vd,36:$Ve,38:$Vf},o($V51,[2,19]),o($V51,[2,20]),o($V51,[2,21]),o($V51,[2,22]),o($V51,[2,23]),o($V61,$V71,{33:113,32:121,3:122,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V$,28:$V01,29:$V11,30:$V21,31:$V31,34:$Vd,36:$Ve,38:$Vf}),o([37,40],$V71,{33:113,3:122,32:123,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V$,28:$V01,29:$V11,30:$V21,31:$V31,34:$Vd,36:$Ve,38:$Vf}),{40:$V81,57:[1,124]},{3:126,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V$,28:$V01,29:$V11,30:$V21,31:$V31,33:113,34:$Vd,36:$Ve,38:$Vf},o($V91,[2,38],{34:[1,127]}),o($V91,[2,39]),{40:$V81,57:[1,128]},{3:129,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V$,28:$V01,29:$V11,30:$V21,31:$V31,33:113,34:$Vd,36:$Ve,38:$Vf},{40:$V81,57:[1,130]},{3:131,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V$,28:$V01,29:$V11,30:$V21,31:$V31,33:113,34:$Vd,36:$Ve,38:$Vf},{40:$V81,57:[1,132]},{3:133,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V$,28:$V01,29:$V11,30:$V21,31:$V31,33:113,34:$Vd,36:$Ve,38:$Vf},o($Va1,$V71,{33:113,3:122,32:134,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V$,28:$V01,29:$V11,30:$V21,31:$V31,34:$Vd,36:$Ve,38:$Vf}),o($V61,$V71,{33:113,3:122,32:135,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V$,28:$V01,29:$V11,30:$V21,31:$V31,34:$Vd,36:$Ve,38:$Vf}),{3:136,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V$,28:$V01,29:$V11,30:$V21,31:$V31,33:113,34:$Vd,36:$Ve,38:$Vf},{57:[1,137]},{3:138,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V$,28:$V01,29:$V11,30:$V21,31:$V31,33:113,34:$Vd,36:$Ve,38:$Vf},{57:[1,139]},{57:[1,140]},{60:[1,141]},{57:[1,142]},{57:[1,143]},{3:144,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V$,28:$V01,29:$V11,30:$V21,31:$V31,33:113,34:$Vd,36:$Ve,38:$Vf},{3:145,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V$,28:$V01,29:$V11,30:$V21,31:$V31,33:113,34:$Vd,36:$Ve,38:$Vf},{3:146,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V$,28:$V01,29:$V11,30:$V21,31:$V31,33:113,34:$Vd,36:$Ve,38:$Vf},{3:147,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V$,28:$V01,29:$V11,30:$V21,31:$V31,33:113,34:$Vd,36:$Ve,38:$Vf},{3:148,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V$,28:$V01,29:$V11,30:$V21,31:$V31,33:113,34:$Vd,36:$Ve,38:$Vf},{3:149,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V$,28:$V01,29:$V11,30:$V21,31:$V31,33:113,34:$Vd,36:$Ve,38:$Vf},{3:150,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V$,28:$V01,29:$V11,30:$V21,31:$V31,33:113,34:$Vd,36:$Ve,38:$Vf},{3:151,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V$,28:$V01,29:$V11,30:$V21,31:$V31,33:113,34:$Vd,36:$Ve,38:$Vf},{3:152,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V$,28:$V01,29:$V11,30:$V21,31:$V31,33:113,34:$Vd,36:$Ve,38:$Vf},{3:153,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V$,28:$V01,29:$V11,30:$V21,31:$V31,33:113,34:$Vd,36:$Ve,38:$Vf},{3:154,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V$,28:$V01,29:$V11,30:$V21,31:$V31,33:113,34:$Vd,36:$Ve,38:$Vf},{3:155,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V$,28:$V01,29:$V11,30:$V21,31:$V31,33:113,34:$Vd,36:$Ve,38:$Vf},{3:156,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V$,28:$V01,29:$V11,30:$V21,31:$V31,33:113,34:$Vd,36:$Ve,38:$Vf},{3:157,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V$,28:$V01,29:$V11,30:$V21,31:$V31,33:113,34:$Vd,36:$Ve,38:$Vf},o($V51,[2,17]),{3:158,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V$,28:$V01,29:$V11,30:$V21,31:$V31,33:113,34:$Vd,36:$Ve,38:$Vf},o($VA,[2,81]),{3:159,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V$,28:$V01,29:$V11,30:$V21,31:$V31,33:113,34:$Vd,36:$Ve,38:$Vf},{11:[1,160]},{11:[1,161]},{3:162,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V$,28:$V01,29:$V11,30:$V21,31:$V31,33:113,34:$Vd,36:$Ve,38:$Vf},{3:163,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V$,28:$V01,29:$V11,30:$V21,31:$V31,33:113,34:$Vd,36:$Ve,38:$Vf},{3:164,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V$,28:$V01,29:$V11,30:$V21,31:$V31,33:113,34:$Vd,36:$Ve,38:$Vf},{3:165,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V$,28:$V01,29:$V11,30:$V21,31:$V31,33:113,34:$Vd,36:$Ve,38:$Vf},{3:166,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V$,28:$V01,29:$V11,30:$V21,31:$V31,33:113,34:$Vd,36:$Ve,38:$Vf},{3:167,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V$,28:$V01,29:$V11,30:$V21,31:$V31,33:113,34:$Vd,36:$Ve,38:$Vf},{3:168,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V$,28:$V01,29:$V11,30:$V21,31:$V31,33:113,34:$Vd,36:$Ve,38:$Vf},{3:169,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V$,28:$V01,29:$V11,30:$V21,31:$V31,33:113,34:$Vd,36:$Ve,38:$Vf},{3:170,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V$,28:$V01,29:$V11,30:$V21,31:$V31,33:113,34:$Vd,36:$Ve,38:$Vf},{3:171,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V$,28:$V01,29:$V11,30:$V21,31:$V31,33:113,34:$Vd,36:$Ve,38:$Vf},{4:$VL,5:$VM,6:$VN,7:$VO,8:$VP,9:$VQ,12:$VR,13:$VS,14:$VT,15:$VU,16:$VV,17:$VW,18:$VX,19:$VY,20:$VZ,21:$V_,66:[1,172]},{10:$VB},{10:$VE},{10:$VF},{10:$VG},o($V51,$VH,{10:[1,173],34:$VI}),o($V51,$VK),{10:[1,174]},{10:[1,175]},o($VA,[2,64]),o($VA,[2,60]),{11:[1,176]},o($V51,[2,7]),{4:$VL,5:$VM,6:$VN,7:$VO,8:$VP,9:$VQ,11:[1,177],12:$VR,13:$VS,14:$VT,15:$VU,16:$VV,17:$VW,18:$VX,19:$VY,20:$VZ,21:$V_},{35:[1,178],40:$Vb1},o($Vc1,[2,41],{4:$VL,5:$VM,6:$VN,7:$VO,8:$VP,9:$VQ,12:$VR,13:$VS,14:$VT,15:$VU,16:$VV,17:$VW,18:$VX,19:$VY,20:$VZ,21:$V_}),{37:[1,180],40:$Vb1},o($VA,[2,66]),{31:[1,181]},{4:$VL,5:$VM,6:$VN,7:$VO,8:$VP,9:$VQ,11:[1,182],12:$VR,13:$VS,14:$VT,15:$VU,16:$VV,17:$VW,18:$VX,19:$VY,20:$VZ,21:$V_},o($V61,$V71,{33:113,3:122,32:183,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V$,28:$V01,29:$V11,30:$V21,31:$V31,34:$Vd,36:$Ve,38:$Vf}),o($VA,[2,67]),{4:$VL,5:$VM,6:$VN,7:$VO,8:$VP,9:$VQ,11:[1,184],12:$VR,13:$VS,14:$VT,15:$VU,16:$VV,17:$VW,18:$VX,19:$VY,20:$VZ,21:$V_},o($VA,[2,68]),{4:$VL,5:$VM,6:$VN,7:$VO,8:$VP,9:$VQ,11:[1,185],12:$VR,13:$VS,14:$VT,15:$VU,16:$VV,17:$VW,18:$VX,19:$VY,20:$VZ,21:$V_},o($VA,[2,69]),{4:$VL,5:$VM,6:$VN,7:$VO,8:$VP,9:$VQ,11:[1,186],12:$VR,13:$VS,14:$VT,15:$VU,16:$VV,17:$VW,18:$VX,19:$VY,20:$VZ,21:$V_},{11:[1,187],40:$Vb1},{35:[1,188],40:$Vb1},{4:$VL,5:$VM,6:$VN,7:$VO,8:$VP,9:$VQ,12:$VR,13:$VS,14:$VT,15:$VU,16:$VV,17:$VW,18:$VX,19:$VY,20:$VZ,21:$V_,57:[1,189]},o($VA,[2,82]),{4:$VL,5:$VM,6:$VN,7:$VO,8:$VP,9:$VQ,12:$VR,13:$VS,14:$VT,15:$VU,16:$VV,17:$VW,18:$VX,19:$VY,20:$VZ,21:$V_,69:[1,190]},o($VA,[2,79]),o($VA,[2,80]),{57:[1,191]},o($VA,[2,96]),o($VA,[2,65]),o($Vd1,[2,1],{6:$VN,7:$VO,8:$VP,9:$VQ}),o($Vd1,[2,2],{6:$VN,7:$VO,8:$VP,9:$VQ}),o($V51,[2,3]),o($V51,[2,4]),o($V51,[2,5]),o($V51,[2,6]),o($Ve1,[2,9],{4:$VL,5:$VM,6:$VN,7:$VO,8:$VP,9:$VQ}),o($Ve1,[2,10],{4:$VL,5:$VM,6:$VN,7:$VO,8:$VP,9:$VQ}),o($Ve1,[2,11],{4:$VL,5:$VM,6:$VN,7:$VO,8:$VP,9:$VQ}),o($Ve1,[2,12],{4:$VL,5:$VM,6:$VN,7:$VO,8:$VP,9:$VQ}),o($Ve1,[2,13],{4:$VL,5:$VM,6:$VN,7:$VO,8:$VP,9:$VQ}),o($Ve1,[2,14],{4:$VL,5:$VM,6:$VN,7:$VO,8:$VP,9:$VQ}),o($Ve1,[2,15],{4:$VL,5:$VM,6:$VN,7:$VO,8:$VP,9:$VQ,12:$VR,13:$VS,14:$VT,15:$VU,16:$VV,17:$VW}),o($Ve1,[2,16],{4:$VL,5:$VM,6:$VN,7:$VO,8:$VP,9:$VQ,12:$VR,13:$VS,14:$VT,15:$VU,16:$VV,17:$VW}),o([11,21,35,37,40,57,64,66,69,70,71,75,77,78,94],[2,18],{4:$VL,5:$VM,6:$VN,7:$VO,8:$VP,9:$VQ,12:$VR,13:$VS,14:$VT,15:$VU,16:$VV,17:$VW,18:$VX,19:$VY,20:$VZ}),{4:$VL,5:$VM,6:$VN,7:$VO,8:$VP,9:$VQ,12:$VR,13:$VS,14:$VT,15:$VU,16:$VV,17:$VW,18:$VX,19:$VY,20:$VZ,21:$V_,40:[1,192]},{57:[1,193]},{57:[1,194]},{4:$VL,5:$VM,6:$VN,7:$VO,8:$VP,9:$VQ,12:$VR,13:$VS,14:$VT,15:$VU,16:$VV,17:$VW,18:$VX,19:$VY,20:$VZ,21:$V_,40:[1,195]},{4:$VL,5:$VM,6:$VN,7:$VO,8:$VP,9:$VQ,12:$VR,13:$VS,14:$VT,15:$VU,16:$VV,17:$VW,18:$VX,19:$VY,20:$VZ,21:$V_,40:[1,196]},{4:$VL,5:$VM,6:$VN,7:$VO,8:$VP,9:$VQ,11:[1,197],12:$VR,13:$VS,14:$VT,15:$VU,16:$VV,17:$VW,18:$VX,19:$VY,20:$VZ,21:$V_},{4:$VL,5:$VM,6:$VN,7:$VO,8:$VP,9:$VQ,11:[1,198],12:$VR,13:$VS,14:$VT,15:$VU,16:$VV,17:$VW,18:$VX,19:$VY,20:$VZ,21:$V_},{4:$VL,5:$VM,6:$VN,7:$VO,8:$VP,9:$VQ,12:$VR,13:$VS,14:$VT,15:$VU,16:$VV,17:$VW,18:$VX,19:$VY,20:$VZ,21:$V_,40:[1,199]},{4:$VL,5:$VM,6:$VN,7:$VO,8:$VP,9:$VQ,12:$VR,13:$VS,14:$VT,15:$VU,16:$VV,17:$VW,18:$VX,19:$VY,20:$VZ,21:$V_,40:[1,200]},{4:$VL,5:$VM,6:$VN,7:$VO,8:$VP,9:$VQ,12:$VR,13:$VS,14:$VT,15:$VU,16:$VV,17:$VW,18:$VX,19:$VY,20:$VZ,21:$V_,40:[1,201]},{4:$VL,5:$VM,6:$VN,7:$VO,8:$VP,9:$VQ,12:$VR,13:$VS,14:$VT,15:$VU,16:$VV,17:$VW,18:$VX,19:$VY,20:$VZ,21:$V_,40:[1,202]},{4:$VL,5:$VM,6:$VN,7:$VO,8:$VP,9:$VQ,12:$VR,13:$VS,14:$VT,15:$VU,16:$VV,17:$VW,18:$VX,19:$VY,20:$VZ,21:$V_,40:[1,203]},{4:$VL,5:$VM,6:$VN,7:$VO,8:$VP,9:$VQ,12:$VR,13:$VS,14:$VT,15:$VU,16:$VV,17:$VW,18:$VX,19:$VY,20:$VZ,21:$V_,40:[1,204]},{60:[1,205]},o($Va1,$V71,{33:113,3:122,32:206,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V$,28:$V01,29:$V11,30:$V21,31:$V31,34:$Vd,36:$Ve,38:$Vf}),o($Va1,$V71,{33:113,3:122,32:207,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V$,28:$V01,29:$V11,30:$V21,31:$V31,34:$Vd,36:$Ve,38:$Vf}),o($Va1,$V71,{33:113,3:122,32:208,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V$,28:$V01,29:$V11,30:$V21,31:$V31,34:$Vd,36:$Ve,38:$Vf}),{57:[1,209]},o($V51,[2,8]),o($V51,[2,30]),{3:210,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V$,28:$V01,29:$V11,30:$V21,31:$V31,33:113,34:$Vd,36:$Ve,38:$Vf},o($V51,[2,31]),o($V91,[2,36],{34:[1,211]}),o($V51,[2,24]),{35:[1,212],40:$Vb1},o($V51,[2,25]),o($V51,[2,26]),o($V51,[2,27]),o($VJ,$Vf1,{57:[1,213]}),o($V41,[2,32]),o($VA,[2,78]),{3:214,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V$,28:$V01,29:$V11,30:$V21,31:$V31,33:113,34:$Vd,36:$Ve,38:$Vf},o($Vg1,$Vh1,{41:215}),{3:216,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V$,28:$V01,29:$V11,30:$V21,31:$V31,33:113,34:$Vd,36:$Ve,38:$Vf},o($VA,[2,84]),o($VA,[2,85]),{3:217,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V$,28:$V01,29:$V11,30:$V21,31:$V31,33:113,34:$Vd,36:$Ve,38:$Vf},{3:218,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V$,28:$V01,29:$V11,30:$V21,31:$V31,33:113,34:$Vd,36:$Ve,38:$Vf},{57:[1,219]},{57:[1,220]},{3:221,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V$,28:$V01,29:$V11,30:$V21,31:$V31,33:113,34:$Vd,36:$Ve,38:$Vf},{3:222,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V$,28:$V01,29:$V11,30:$V21,31:$V31,33:113,34:$Vd,36:$Ve,38:$Vf},{3:223,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V$,28:$V01,29:$V11,30:$V21,31:$V31,33:113,34:$Vd,36:$Ve,38:$Vf},{3:224,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V$,28:$V01,29:$V11,30:$V21,31:$V31,33:113,34:$Vd,36:$Ve,38:$Vf},{3:225,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V$,28:$V01,29:$V11,30:$V21,31:$V31,33:113,34:$Vd,36:$Ve,38:$Vf},{3:226,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V$,28:$V01,29:$V11,30:$V21,31:$V31,33:113,34:$Vd,36:$Ve,38:$Vf},{57:[1,227]},{11:[1,228],40:$Vb1},{11:[1,229],40:$Vb1},{11:[1,230],40:$Vb1},o($VA,[2,61]),o($Vc1,[2,40],{4:$VL,5:$VM,6:$VN,7:$VO,8:$VP,9:$VQ,12:$VR,13:$VS,14:$VT,15:$VU,16:$VV,17:$VW,18:$VX,19:$VY,20:$VZ,21:$V_}),o($V61,$V71,{33:113,3:122,32:231,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V$,28:$V01,29:$V11,30:$V21,31:$V31,34:$Vd,36:$Ve,38:$Vf}),o($V91,[2,37]),o($VA,[2,70]),{4:$VL,5:$VM,6:$VN,7:$VO,8:$VP,9:$VQ,12:$VR,13:$VS,14:$VT,15:$VU,16:$VV,17:$VW,18:$VX,19:$VY,20:$VZ,21:$V_,70:[1,232]},{3:27,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:$V9,29:$Va,30:$Vb,31:$Vc,33:26,34:$Vd,36:$Ve,38:$Vf,42:234,43:6,44:7,45:8,46:9,47:10,48:11,49:12,50:13,51:14,52:15,53:16,54:17,55:18,56:19,57:$Vg,58:$Vh,59:$Vi,61:[1,233],62:$Vj,63:$Vk,65:$Vl,79:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz},{4:$VL,5:$VM,6:$VN,7:$VO,8:$VP,9:$VQ,11:[1,235],12:$VR,13:$VS,14:$VT,15:$VU,16:$VV,17:$VW,18:$VX,19:$VY,20:$VZ,21:$V_},{4:$VL,5:$VM,6:$VN,7:$VO,8:$VP,9:$VQ,12:$VR,13:$VS,14:$VT,15:$VU,16:$VV,17:$VW,18:$VX,19:$VY,20:$VZ,21:$V_,40:[1,236]},{4:$VL,5:$VM,6:$VN,7:$VO,8:$VP,9:$VQ,12:$VR,13:$VS,14:$VT,15:$VU,16:$VV,17:$VW,18:$VX,19:$VY,20:$VZ,21:$V_,40:[1,237]},o($VA,[2,88]),o($VA,[2,89]),{4:$VL,5:$VM,6:$VN,7:$VO,8:$VP,9:$VQ,12:$VR,13:$VS,14:$VT,15:$VU,16:$VV,17:$VW,18:$VX,19:$VY,20:$VZ,21:$V_,40:[1,238]},{4:$VL,5:$VM,6:$VN,7:$VO,8:$VP,9:$VQ,12:$VR,13:$VS,14:$VT,15:$VU,16:$VV,17:$VW,18:$VX,19:$VY,20:$VZ,21:$V_,40:[1,239]},{4:$VL,5:$VM,6:$VN,7:$VO,8:$VP,9:$VQ,12:$VR,13:$VS,14:$VT,15:$VU,16:$VV,17:$VW,18:$VX,19:$VY,20:$VZ,21:$V_,40:[1,240]},{4:$VL,5:$VM,6:$VN,7:$VO,8:$VP,9:$VQ,12:$VR,13:$VS,14:$VT,15:$VU,16:$VV,17:$VW,18:$VX,19:$VY,20:$VZ,21:$V_,40:[1,241]},{4:$VL,5:$VM,6:$VN,7:$VO,8:$VP,9:$VQ,12:$VR,13:$VS,14:$VT,15:$VU,16:$VV,17:$VW,18:$VX,19:$VY,20:$VZ,21:$V_,40:[1,242]},{4:$VL,5:$VM,6:$VN,7:$VO,8:$VP,9:$VQ,12:$VR,13:$VS,14:$VT,15:$VU,16:$VV,17:$VW,18:$VX,19:$VY,20:$VZ,21:$V_,40:[1,243]},o($Vi1,$Vh1,{41:244}),o($V51,$Vf1),{60:[1,245]},{60:[1,246]},{35:[1,247],40:$Vb1},{3:248,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V$,28:$V01,29:$V11,30:$V21,31:$V31,33:113,34:$Vd,36:$Ve,38:$Vf,72:[1,249],74:[1,250]},{57:[1,251]},o($Vi1,[2,43]),{57:[1,252]},{3:253,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V$,28:$V01,29:$V11,30:$V21,31:$V31,33:113,34:$Vd,36:$Ve,38:$Vf},{3:254,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V$,28:$V01,29:$V11,30:$V21,31:$V31,33:113,34:$Vd,36:$Ve,38:$Vf},{3:255,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V$,28:$V01,29:$V11,30:$V21,31:$V31,33:113,34:$Vd,36:$Ve,38:$Vf},{3:256,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V$,28:$V01,29:$V11,30:$V21,31:$V31,33:113,34:$Vd,36:$Ve,38:$Vf},{3:257,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V$,28:$V01,29:$V11,30:$V21,31:$V31,33:113,34:$Vd,36:$Ve,38:$Vf},{3:258,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V$,28:$V01,29:$V11,30:$V21,31:$V31,33:113,34:$Vd,36:$Ve,38:$Vf},{3:259,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V$,28:$V01,29:$V11,30:$V21,31:$V31,33:113,34:$Vd,36:$Ve,38:$Vf},{3:260,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V$,28:$V01,29:$V11,30:$V21,31:$V31,33:113,34:$Vd,36:$Ve,38:$Vf},{3:27,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:$V9,29:$Va,30:$Vb,31:$Vc,33:26,34:$Vd,36:$Ve,38:$Vf,42:234,43:6,44:7,45:8,46:9,47:10,48:11,49:12,50:13,51:14,52:15,53:16,54:17,55:18,56:19,57:$Vg,58:$Vh,59:$Vi,61:[1,261],62:$Vj,63:$Vk,65:$Vl,67:[1,262],79:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz},{57:[1,263]},{57:[1,264]},o($V91,[2,35]),{4:$VL,5:$VM,6:$VN,7:$VO,8:$VP,9:$VQ,12:$VR,13:$VS,14:$VT,15:$VU,16:$VV,17:$VW,18:$VX,19:$VY,20:$VZ,21:$V_,71:[1,265]},{73:[1,266]},{73:[1,267]},o($VA,[2,77]),o($VA,[2,83]),{4:$VL,5:$VM,6:$VN,7:$VO,8:$VP,9:$VQ,11:[1,268],12:$VR,13:$VS,14:$VT,15:$VU,16:$VV,17:$VW,18:$VX,19:$VY,20:$VZ,21:$V_},{4:$VL,5:$VM,6:$VN,7:$VO,8:$VP,9:$VQ,11:[1,269],12:$VR,13:$VS,14:$VT,15:$VU,16:$VV,17:$VW,18:$VX,19:$VY,20:$VZ,21:$V_},{4:$VL,5:$VM,6:$VN,7:$VO,8:$VP,9:$VQ,11:[1,270],12:$VR,13:$VS,14:$VT,15:$VU,16:$VV,17:$VW,18:$VX,19:$VY,20:$VZ,21:$V_},{4:$VL,5:$VM,6:$VN,7:$VO,8:$VP,9:$VQ,12:$VR,13:$VS,14:$VT,15:$VU,16:$VV,17:$VW,18:$VX,19:$VY,20:$VZ,21:$V_,40:[1,271]},{4:$VL,5:$VM,6:$VN,7:$VO,8:$VP,9:$VQ,12:$VR,13:$VS,14:$VT,15:$VU,16:$VV,17:$VW,18:$VX,19:$VY,20:$VZ,21:$V_,40:[1,272]},{4:$VL,5:$VM,6:$VN,7:$VO,8:$VP,9:$VQ,12:$VR,13:$VS,14:$VT,15:$VU,16:$VV,17:$VW,18:$VX,19:$VY,20:$VZ,21:$V_,40:[1,273]},{4:$VL,5:$VM,6:$VN,7:$VO,8:$VP,9:$VQ,11:[1,274],12:$VR,13:$VS,14:$VT,15:$VU,16:$VV,17:$VW,18:$VX,19:$VY,20:$VZ,21:$V_},{4:$VL,5:$VM,6:$VN,7:$VO,8:$VP,9:$VQ,11:[1,275],12:$VR,13:$VS,14:$VT,15:$VU,16:$VV,17:$VW,18:$VX,19:$VY,20:$VZ,21:$V_},{57:[1,276]},{60:[1,277]},o($Vg1,$Vh1,{41:278}),o($Vg1,$Vh1,{41:279}),{72:[1,280],74:[1,281]},{60:[1,282]},{60:[1,283]},{57:[1,284]},{57:[1,285]},{57:[1,286]},{3:287,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V$,28:$V01,29:$V11,30:$V21,31:$V31,33:113,34:$Vd,36:$Ve,38:$Vf},{3:288,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V$,28:$V01,29:$V11,30:$V21,31:$V31,33:113,34:$Vd,36:$Ve,38:$Vf},{3:289,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V$,28:$V01,29:$V11,30:$V21,31:$V31,33:113,34:$Vd,36:$Ve,38:$Vf},{57:[1,290]},{57:[1,291]},o($VA,[2,71]),{57:[1,292]},{3:27,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:$V9,29:$Va,30:$Vb,31:$Vc,33:26,34:$Vd,36:$Ve,38:$Vf,42:234,43:6,44:7,45:8,46:9,47:10,48:11,49:12,50:13,51:14,52:15,53:16,54:17,55:18,56:19,57:$Vg,58:$Vh,59:$Vi,61:[1,293],62:$Vj,63:$Vk,65:$Vl,79:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz},{3:27,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:$V9,29:$Va,30:$Vb,31:$Vc,33:26,34:$Vd,36:$Ve,38:$Vf,42:234,43:6,44:7,45:8,46:9,47:10,48:11,49:12,50:13,51:14,52:15,53:16,54:17,55:18,56:19,57:$Vg,58:$Vh,59:$Vi,61:[1,294],62:$Vj,63:$Vk,65:$Vl,79:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz},{73:[1,295]},{73:[1,296]},{57:[1,297]},{57:[1,298]},o($VA,[2,86]),o($VA,[2,87]),o($VA,[2,90]),{4:$VL,5:$VM,6:$VN,7:$VO,8:$VP,9:$VQ,11:[1,299],12:$VR,13:$VS,14:$VT,15:$VU,16:$VV,17:$VW,18:$VX,19:$VY,20:$VZ,21:$V_},{4:$VL,5:$VM,6:$VN,7:$VO,8:$VP,9:$VQ,11:[1,300],12:$VR,13:$VS,14:$VT,15:$VU,16:$VV,17:$VW,18:$VX,19:$VY,20:$VZ,21:$V_},{4:$VL,5:$VM,6:$VN,7:$VO,8:$VP,9:$VQ,11:[1,301],12:$VR,13:$VS,14:$VT,15:$VU,16:$VV,17:$VW,18:$VX,19:$VY,20:$VZ,21:$V_},o($VA,[2,94]),o($VA,[2,95]),o($Vg1,$Vh1,{41:302}),{57:[1,303]},{57:[1,304]},{60:[1,305]},{60:[1,306]},o($Vg1,$Vh1,{41:307}),o($Vg1,$Vh1,{41:308}),{57:[1,309]},{57:[1,310]},{57:[1,311]},{3:27,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:$V9,29:$Va,30:$Vb,31:$Vc,33:26,34:$Vd,36:$Ve,38:$Vf,42:234,43:6,44:7,45:8,46:9,47:10,48:11,49:12,50:13,51:14,52:15,53:16,54:17,55:18,56:19,57:$Vg,58:$Vh,59:$Vi,61:[1,312],62:$Vj,63:$Vk,65:$Vl,79:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz},o($VA,[2,62]),o($VA,[2,63]),{57:[1,313]},{57:[1,314]},{3:27,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:$V9,29:$Va,30:$Vb,31:$Vc,33:26,34:$Vd,36:$Ve,38:$Vf,42:234,43:6,44:7,45:8,46:9,47:10,48:11,49:12,50:13,51:14,52:15,53:16,54:17,55:18,56:19,57:$Vg,58:$Vh,59:$Vi,61:[1,315],62:$Vj,63:$Vk,65:$Vl,79:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz},{3:27,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:$V9,29:$Va,30:$Vb,31:$Vc,33:26,34:$Vd,36:$Ve,38:$Vf,42:234,43:6,44:7,45:8,46:9,47:10,48:11,49:12,50:13,51:14,52:15,53:16,54:17,55:18,56:19,57:$Vg,58:$Vh,59:$Vi,61:[1,316],62:$Vj,63:$Vk,65:$Vl,79:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz},o($VA,[2,91]),o($VA,[2,92]),o($VA,[2,93]),{57:[1,317]},o($Vg1,$Vh1,{41:318}),o($Vg1,$Vh1,{41:319}),{57:[1,320]},{57:[1,321]},o($VA,[2,72]),{3:27,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:$V9,29:$Va,30:$Vb,31:$Vc,33:26,34:$Vd,36:$Ve,38:$Vf,42:234,43:6,44:7,45:8,46:9,47:10,48:11,49:12,50:13,51:14,52:15,53:16,54:17,55:18,56:19,57:$Vg,58:$Vh,59:$Vi,61:[1,322],62:$Vj,63:$Vk,65:$Vl,79:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz},{3:27,5:$V1,10:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:$V9,29:$Va,30:$Vb,31:$Vc,33:26,34:$Vd,36:$Ve,38:$Vf,42:234,43:6,44:7,45:8,46:9,47:10,48:11,49:12,50:13,51:14,52:15,53:16,54:17,55:18,56:19,57:$Vg,58:$Vh,59:$Vi,61:[1,323],62:$Vj,63:$Vk,65:$Vl,79:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz},o($VA,[2,75]),o($VA,[2,76]),{57:[1,324]},{57:[1,325]},o($VA,[2,73]),o($VA,[2,74])],
defaultActions: {3:[2,97]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = yylineno + 1 + '行目に構文エラー：\n' + lexer.showPosition() + '\n\'' + (this.terminals_[symbol] || symbol) + '\'の近く（★のあたり）がおかしい';
                } else {
                    errStr = yylineno + 1 + '行目に構文エラー：\n予期しない' + (symbol == EOF ? 'プログラムの終わり' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	function toHalf(s, token)
	{
		if(setting.zenkaku_mode == 1)
		{
			if(/[Ａ-Ｚａ-ｚ０-９．−]/.exec(s))
				throw {message:token.first_line + "行目に全角文字が間違って使われています"};
		}
		return s.replace(/[Ａ-Ｚａ-ｚ０-９．−]/g, function(s) {
			return String.fromCharCode(s.charCodeAt(0) - 0xFEE0);}
		);
	}
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var re = /■/g;
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
//        return pre + this.upcomingInput() + "\n" + c + "^";
        return pre.replace(re,'') + '★' + this.upcomingInput().replace(re, '') + '...\n';
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        if(match[0].match(/^■$/)) this.yylineno--; // added
        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError((this.yylineno + 1) + '行目にエラー。\n★の近くに不明なテキスト。\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 30;
break;
case 1:return 25;
break;
case 2:return 25;
break;
case 3:return 25;
break;
case 4:return 26;
break;
case 5:return 26;
break;
case 6:return 26;
break;
case 7:return 24;
break;
case 8:return 23;
break;
case 9:return 22;
break;
case 10:return 40;
break;
case 11:return 60
break;
case 12:return 38;
break;
case 13:return 4;
break;
case 14:return 4;
break;
case 15:return 5;
break;
case 16:return 5;
break;
case 17:return 5;
break;
case 18:return 6;
break;
case 19:return 6;
break;
case 20:return 6;
break;
case 21:return 8
break;
case 22:return 8
break;
case 23:return 7;
break;
case 24:return 7;
break;
case 25:return 8;
break;
case 26:return 7;
break;
case 27:return 9;
break;
case 28:return 9;
break;
case 29:return 10;
break;
case 30:return 11;
break;
case 31:return 10;
break;
case 32:return 11;
break;
case 33:return 34;
break;
case 34:return 35;
break;
case 35:return 34;
break;
case 36:return 35;
break;
case 37:return 36;
break;
case 38:return 37;
break;
case 39:return 36;
break;
case 40:return 37;
break;
case 41:return 16;
break;
case 42:return 17;
break;
case 43:return 16;
break;
case 44:return 17;
break;
case 45:return 16;
break;
case 46:return 17;
break;
case 47:return 14;
break;
case 48:return 15;
break;
case 49:return 14;
break;
case 50:return 15;
break;
case 51:return 12
break;
case 52:return 12;
break;
case 53:return 12;
break;
case 54:return 12;
break;
case 55:return 13;
break;
case 56:return 13;
break;
case 57:return 13;
break;
case 58:return 76;
break;
case 59:return 18;
break;
case 60:return 19;
break;
case 61:return 20;
break;
case 62:return 61
break;
case 63:return 78;
break;
case 64:return 77;
break;
case 65:return 77;
break;
case 66:return 80;
break;
case 67:return 65;
break;
case 68:return 66;
break;
case 69:return 67;
break;
case 70:return 75;
break;
case 71:return 75;
break;
case 72:return '繰り返しを抜ける';
break;
case 73:return '繰り返しを抜ける';
break;
case 74:return '繰り返しを抜ける';
break;
case 75:return 63;
break;
case 76:return 59;
break;
case 77:return 62;
break;
case 78:return 64;
break;
case 79:return 68;
break;
case 80:return 69;
break;
case 81:return 70;
break;
case 82:return 71;
break;
case 83:return 72;
break;
case 84:return 74;
break;
case 85:return 72;
break;
case 86:return 74;
break;
case 87:return 73;
break;
case 88:return 73;
break;
case 89:return 27;
break;
case 90:return 28;
break;
case 91:return 29;
break;
case 92:return 21;
break;
case 93:return 21;
break;
case 94:return 81;
break;
case 95:return 82;
break;
case 96:return 83;
break;
case 97:return 84;
break;
case 98:return 85;
break;
case 99:return 86;
break;
case 100:return 87;
break;
case 101:return 88;
break;
case 102:return 89;
break;
case 103:return 90;
break;
case 104:return 91;
break;
case 105:return 92;
break;
case 106:return 93;
break;
case 107:return 94;
break;
case 108:return 58;
break;
case 109:return 79;
break;
case 110:return 31;
break;
case 111:return 97;
break;
case 112:return 57;
break;
case 113:/* skip whitespace */
break;
}
},
rules: [/^(?:真偽)/,/^(?:true\b)/,/^(?:TRUE\b)/,/^(?:真)/,/^(?:false\b)/,/^(?:FALSE\b)/,/^(?:偽)/,/^(?:(「[^」]*」|｢[^｣]*｣|"[^"]*"))/,/^(?:(([0０]|(([1-9１-９])([0-9０-９])*))[.．]([0-9０-９])+))/,/^(?:([0０]|(([1-9１-９])([0-9０-９])*)))/,/^(?:([，,、]))/,/^(?:([:：]))/,/^(?:(《[^》]*》))/,/^(?:\+)/,/^(?:＋)/,/^(?:-)/,/^(?:ー)/,/^(?:−)/,/^(?:\*)/,/^(?:＊)/,/^(?:✕)/,/^(?:\/\/)/,/^(?:／／)/,/^(?:\/)/,/^(?:／)/,/^(?:÷÷)/,/^(?:÷)/,/^(?:%)/,/^(?:％)/,/^(?:\()/,/^(?:\))/,/^(?:（)/,/^(?:）)/,/^(?:\[)/,/^(?:\])/,/^(?:［)/,/^(?:］)/,/^(?:\{)/,/^(?:\})/,/^(?:｛)/,/^(?:｝)/,/^(?:>=)/,/^(?:<=)/,/^(?:≧)/,/^(?:≦)/,/^(?:＞＝)/,/^(?:＜＝)/,/^(?:>)/,/^(?:<)/,/^(?:＞)/,/^(?:＜)/,/^(?:==)/,/^(?:=)/,/^(?:＝＝)/,/^(?:＝)/,/^(?:!=)/,/^(?:≠)/,/^(?:！＝)/,/^(?:←)/,/^(?:かつ)/,/^(?:または)/,/^(?:でない)/,/^(?:■)/,/^(?:を(表示|印刷|出力)する)/,/^(?:を改行無しで(表示|印刷|出力)する)/,/^(?:を改行なしで(表示|印刷|出力)する)/,/^(?:を入力する)/,/^(?:もし)/,/^(?:ならば)/,/^(?:そうでなければ)/,/^(?:の間繰り返す)/,/^(?:の間繰返す)/,/^(?:繰り返しを抜ける)/,/^(?:繰返しを抜ける)/,/^(?:くりかえしを抜ける)/,/^(?:手続きを抜ける)/,/^(?:手続き)/,/^(?:関数)/,/^(?:を返す)/,/^(?:を)/,/^(?:から)/,/^(?:まで)/,/^(?:ずつ)/,/^(?:増やしながら)/,/^(?:減らしながら)/,/^(?:増やしつつ)/,/^(?:減らしつつ)/,/^(?:繰り返す)/,/^(?:繰返す)/,/^(?:整数)/,/^(?:実数)/,/^(?:文字列)/,/^(?:と([，,、]))/,/^(?:と)/,/^(?:描画領域開く)/,/^(?:描画領域閉じる)/,/^(?:描画領域全消去)/,/^(?:線色設定)/,/^(?:塗色設定)/,/^(?:線太さ設定)/,/^(?:文字サイズ設定)/,/^(?:文字描画)/,/^(?:線描画)/,/^(?:矩形描画)/,/^(?:矩形塗描画)/,/^(?:円描画)/,/^(?:円塗描画)/,/^(?:ミリ秒待つ)/,/^(?:変数を確認する)/,/^(?:改行する)/,/^(?:(([a-zA-Zａ-ｚＡ-Ｚ])([a-zA-Z0-9ａ-ｚＡ-Ｚ０-９])*))/,/^(?:$)/,/^(?:(\r\n|\r|\n))/,/^(?:([\s\t 　]))/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = dncl;
exports.Parser = dncl.Parser;
exports.parse = function () { return dncl.parse.apply(dncl, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}