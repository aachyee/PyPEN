/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var dncl = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[5,9,21,22,23,24,25,26,31,46,47,48,49,50,51,62,70,71,72,73,74,75,76,77,78,79,80,81,84],$V1=[1,39],$V2=[1,40],$V3=[1,41],$V4=[1,42],$V5=[1,43],$V6=[1,44],$V7=[1,45],$V8=[1,37],$V9=[1,38],$Va=[1,16],$Vb=[1,17],$Vc=[1,18],$Vd=[1,19],$Ve=[1,20],$Vf=[1,21],$Vg=[1,23],$Vh=[1,25],$Vi=[1,26],$Vj=[1,27],$Vk=[1,28],$Vl=[1,29],$Vm=[1,30],$Vn=[1,31],$Vo=[1,32],$Vp=[1,33],$Vq=[1,34],$Vr=[1,35],$Vs=[1,36],$Vt=[5,9,21,22,23,24,25,26,31,46,47,48,49,50,51,53,54,60,62,63,70,71,72,73,74,75,76,77,78,79,80,81,84],$Vu=[1,47],$Vv=[1,48],$Vw=[2,24],$Vx=[1,61],$Vy=[1,62],$Vz=[1,63],$VA=[1,64],$VB=[1,65],$VC=[1,66],$VD=[1,67],$VE=[1,68],$VF=[1,69],$VG=[1,70],$VH=[1,71],$VI=[1,72],$VJ=[1,73],$VK=[1,74],$VL=[1,75],$VM=[4,5,6,7,8,10,11,12,13,14,15,16,17,18,19,20,30,33,46,52,55,56,57,58,64,65,66,67,68,69],$VN=[4,5,6,7,8,10,11,12,13,14,15,16,17,18,19,20,30,33,46,52,56,57,58,64,65,67,68],$VO=[1,93],$VP=[33,46],$VQ=[2,37],$VR=[30,33],$VS=[2,35],$VT=[5,9,21,22,23,24,25,26,31,46,47,48,49,50,51,60,62,70,71,72,73,74,75,76,77,78,79,80,81],$VU=[4,5,10,11,12,13,14,15,16,17,18,19,20,30,33,46,52,56,57,58,64,65,67,68],$VV=[10,17,18,19,20,30,33,46,52,56,57,58,64,65,67,68],$VW=[10,17,18,20,30,33,46,52,56,57,58,64,65,67,68],$VX=[1,157],$VY=[10,30,33];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"e":3,"+":4,"-":5,"*":6,"/":7,"%":8,"(":9,")":10,"=":11,"!=":12,">":13,"<":14,">=":15,"<=":16,"AND":17,"OR":18,"NOT":19,"APPEND":20,"INTEGER":21,"FLOAT":22,"STRING":23,"TRUE":24,"FALSE":25,"IDENTIFIER":26,"parameterlist":27,"variable":28,"[":29,"]":30,"UNDEFINED":31,"variablelist":32,"COMMA":33,"statementlist":34,"statement":35,"EmptyStatement":36,"DefineStatement":37,"IfStatement":38,"ForStatement":39,"LoopStatement":40,"WhileStatement":41,"AssignStatement":42,"PrintStatement":43,"InputStatement":44,"GraphicStatement":45,"NEWLINE":46,"DEFINT":47,"DEFFLOAT":48,"DEFSTR":49,"DEFBOOL":50,"IF":51,"THEN":52,"ENDIF":53,"ELSE":54,"FOR1":55,"FOR2":56,"FOR3":57,"FOR4":58,"FORINC":59,"ENDLOOP":60,"FORDEC":61,"LOOP":62,"UNTIL1":63,"UNTIL2":64,"WHILE":65,"<-":66,"PRINT":67,"PRINTLN":68,"INPUT":69,"gOpenWindow":70,"gCloseWindow":71,"gSetLineColor":72,"gSetFillColor":73,"gSetLineWidth":74,"gSetFontSize":75,"gDrawText":76,"gDrawLine":77,"gDrawBox":78,"gFillBox":79,"gDrawCircle":80,"gFillCircle":81,"Program":82,"SourceElements":83,"EOF":84,"SourceElement":85,"$accept":0,"$end":1},
terminals_: {2:"error",4:"+",5:"-",6:"*",7:"/",8:"%",9:"(",10:")",11:"=",12:"!=",13:">",14:"<",15:">=",16:"<=",17:"AND",18:"OR",19:"NOT",20:"APPEND",21:"INTEGER",22:"FLOAT",23:"STRING",24:"TRUE",25:"FALSE",26:"IDENTIFIER",29:"[",30:"]",31:"UNDEFINED",33:"COMMA",46:"NEWLINE",47:"DEFINT",48:"DEFFLOAT",49:"DEFSTR",50:"DEFBOOL",51:"IF",52:"THEN",53:"ENDIF",54:"ELSE",55:"FOR1",56:"FOR2",57:"FOR3",58:"FOR4",59:"FORINC",60:"ENDLOOP",61:"FORDEC",62:"LOOP",63:"UNTIL1",64:"UNTIL2",65:"WHILE",66:"<-",67:"PRINT",68:"PRINTLN",69:"INPUT",70:"gOpenWindow",71:"gCloseWindow",72:"gSetLineColor",73:"gSetFillColor",74:"gSetLineWidth",75:"gSetFontSize",76:"gDrawText",77:"gDrawLine",78:"gDrawBox",79:"gFillBox",80:"gDrawCircle",81:"gFillCircle",84:"EOF"},
productions_: [0,[3,3],[3,3],[3,3],[3,3],[3,3],[3,2],[3,3],[3,3],[3,3],[3,3],[3,3],[3,3],[3,3],[3,3],[3,3],[3,2],[3,3],[3,1],[3,1],[3,1],[3,1],[3,1],[3,4],[3,1],[28,4],[28,1],[28,1],[32,6],[32,3],[32,4],[32,1],[32,1],[27,3],[27,1],[27,0],[34,2],[34,0],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[36,1],[37,3],[37,3],[37,3],[37,3],[38,7],[38,10],[39,13],[39,13],[39,11],[39,11],[40,7],[41,6],[42,4],[43,3],[43,3],[44,3],[45,7],[45,4],[45,9],[45,9],[45,5],[45,5],[45,9],[45,11],[45,11],[45,11],[45,9],[45,9],[82,2],[83,2],[83,0],[85,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 this.$ = new Add($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 2:
 this.$ = new Sub($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 3:
 this.$ = new Mul($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 4:
 this.$ = new Div($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 5:
 this.$ = new Mod($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 6:
 this.$ = new Minus($$[$0], new Location(_$[$0], _$[$0]));
break;
case 7:
this.$ = $$[$0-1];
break;
case 8:
this.$ = new EQ($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 9:
this.$ = new NE($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 10:
this.$ = new GT($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 11:
this.$ = new LT($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 12:
this.$ = new GE($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 13:
this.$ = new LE($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 14:
this.$ = new And($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 15:
this.$ = new Or($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 16:
this.$ = new Not($$[$0-1], new Location(_$[$0-1], _$[$0-1]));
break;
case 17:
this.$ = new Append($$[$0-2], $$[$0], new Location(_$[$0-2], _$[$0]));
break;
case 18:
this.$ = new IntValue(Number(yytext), new Location(_$[$0],_$[$0]));
break;
case 19:
this.$ = new FloatValue(Number(yytext), new Location(_$[$0],_$[$0]));
break;
case 20:
this.$ = new StringValue(yytext.substring(1, yytext.length - 1), new Location(_$[$0], _$[$0]));
break;
case 21:
this.$ = new BooleanValue(true, new Location(_$[$0],_$[$0]));
break;
case 22:
this.$ = new BooleanValue(false, new Location(_$[$0],_$[$0]));
break;
case 23:
this.$ = new CallFunction($$[$0-3], $$[$0-1], new Location(_$[$0-3],_$[$0-3]));
break;
case 25:
this.$ = new Variable($$[$0-3], $$[$0-1], new Location(_$[$0-3],_$[$0-3]));
break;
case 26:
this.$ = new Variable($$[$0], null, new Location(_$[$0], _$[$0]));
break;
case 27:
this.$ = new UNDEFINED(new Location(_$[$0],_$[$0]));
break;
case 28:
this.$ = $$[$0-5].concat({varname:$$[$0-3], parameter:$$[$0-1]});
break;
case 29:
this.$ = $$[$0-2].concat({varname:$$[$0]});
break;
case 30:
this.$ = [{varname:$$[$0-3], parameter:$$[$0-1]}];
break;
case 31:
this.$ = [{varname:$$[$0]}];
break;
case 32:
this.$ = [new UNDEFINED(new Location(_$[$0],_$[$0]))];
break;
case 33:
this.$ = $$[$0-2].concat($$[$0]);
break;
case 34:
 this.$ = [$$[$0]];
break;
case 35: case 79:
 this.$ = [];
break;
case 36:
 if($$[$0] != null) this.$ = $$[$0-1].concat($$[$0]);
break;
case 37:
this.$ = [];
break;
case 48:
 this.$ = null;
break;
case 49:
this.$ = new DefinitionInt($$[$0-1], new Location(_$[$0-2],_$[$0-1]));
break;
case 50:
this.$ = new DefinitionFloat($$[$0-1], new Location(_$[$0-2],_$[$0-1]));
break;
case 51:
this.$ = new DefinitionString($$[$0-1], new Location(_$[$0-2],_$[$0-1]));
break;
case 52:
this.$ = new DefinitionBoolean($$[$0-1], new Location(_$[$0-2],_$[$0-1]));
break;
case 53:

		this.$ = new If($$[$0-5],$$[$0-2],null, new Location(_$[$0-6], _$[$0-1]));
	
break;
case 54:

		this.$ = new If($$[$0-8],$$[$0-5],$$[$0-2], new Location(_$[$0-9], _$[$0-1]));
	
break;
case 55:
this.$ = new ForInc($$[$0-12], $$[$0-10], $$[$0-8], $$[$0-6],$$[$0-2], new Location(_$[$0-12],_$[$0-1]));
break;
case 56:
this.$ = new ForDec($$[$0-12], $$[$0-10], $$[$0-8], $$[$0-6],$$[$0-2], new Location(_$[$0-12],_$[$0-1]));
break;
case 57:
this.$ = new ForInc($$[$0-10], $$[$0-8], $$[$0-6], new IntValue(1, new Location(_$[$0-10], _$[$0-10])),$$[$0-2], new Location(_$[$0-10],_$[$0-1]));
break;
case 58:
this.$ = new ForDec($$[$0-10], $$[$0-8], $$[$0-6], new IntValue(1, new Location(_$[$0-10], _$[$0-10])),$$[$0-2], new Location(_$[$0-10],_$[$0-1]));
break;
case 59:
this.$ = new Until($$[$0-4], $$[$0-2], new Location(_$[$0-6], _$[$0]));
break;
case 60:
this.$ = new While($$[$0-5], $$[$0-2], new Location(_$[$0-5], _$[$0]));
break;
case 61:
this.$ = new Assign($$[$0-3], $$[$0-1], new Location(_$[$0-3],_$[$0-1]));
break;
case 62:
this.$ = new Output($$[$0-2], false, new Location(_$[$0-2],_$[$0-1]));
break;
case 63:
this.$ = new Output($$[$0-2], true, new Location(_$[$0-2],_$[$0-1]));
break;
case 64:
this.$ = new Input($$[$0-2], new Location(_$[$0-2], _$[$0-1]));
break;
case 65:
this.$ = new GraphicStatement('gOpenWindow', [$$[$0-4],$$[$0-2]], new Location(_$[$0-6], _$[$0-6]));
break;
case 66:
this.$ = new GraphicStatement('gCloseWindow', [], new Location(_$[$0-3],_$[$0-3]));
break;
case 67:
this.$ = new GraphicStatement('gSetLineColor', [$$[$0-6],$$[$0-4],$$[$0-2]], new Location(_$[$0-8], _$[$0-8]));
break;
case 68:
this.$ = new GraphicStatement('gSetFillColor', [$$[$0-6],$$[$0-4],$$[$0-2]], new Location(_$[$0-8], _$[$0-8]));
break;
case 69:
this.$ = new GraphicStatement('gSetLineWidth', [$$[$0-2]], new Location(_$[$0-4], _$[$0-4]));
break;
case 70:
this.$ = new GraphicStatement('gSetFontSize', [$$[$0-2]], new Location(_$[$0-4], _$[$0-4]));
break;
case 71:
this.$ = new GraphicStatement('gDrawText', [$$[$0-6],$$[$0-4],$$[$0-2]], new Location(_$[$0-8],_$[$0-8]));
break;
case 72:
this.$ = new GraphicStatement('gDrawLine', [$$[$0-8],$$[$0-6],$$[$0-4],$$[$0-2]], new Location(_$[$0-10],_$[$0-10]));
break;
case 73:
this.$ = new GraphicStatement('gDrawBox', [$$[$0-8],$$[$0-6],$$[$0-4],$$[$0-2]], new Location(_$[$0-10],_$[$0-10]));
break;
case 74:
this.$ = new GraphicStatement('gFillBox', [$$[$0-8],$$[$0-6],$$[$0-4],$$[$0-2]], new Location(_$[$0-10],_$[$0-10]));
break;
case 75:
this.$ = new GraphicStatement('gDrawCircle', [$$[$0-6],$$[$0-4],$$[$0-2],$$[$0]], new Location(_$[$0-8],_$[$0-8]));
break;
case 76:
this.$ = new GraphicStatement('gFillCircle', [$$[$0-6],$$[$0-4],$$[$0-2],$$[$0]], new Location(_$[$0-8],_$[$0-8]));
break;
case 77:
 typeof console !== 'undefined' ? console.log($$[$0-1]) : print($$[$0-1]);
	          return $$[$0-1]; 
break;
case 78:
 this.$ = $$[$0-1].concat($$[$0]);
break;
}
},
table: [o($V0,[2,79],{82:1,83:2}),{1:[3]},{3:24,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:22,31:$V9,35:5,36:6,37:7,38:8,39:9,40:10,41:11,42:12,43:13,44:14,45:15,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,62:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,74:$Vl,75:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,84:[1,3],85:4},{1:[2,77]},o($V0,[2,78]),o($V0,[2,80]),o($Vt,[2,38]),o($Vt,[2,39]),o($Vt,[2,40]),o($Vt,[2,41]),o($Vt,[2,42]),o($Vt,[2,43]),o($Vt,[2,44]),o($Vt,[2,45]),o($Vt,[2,46]),o($Vt,[2,47]),o($Vt,[2,48]),{26:$Vu,31:$Vv,32:46},{26:$Vu,31:$Vv,32:49},{26:$Vu,31:$Vv,32:50},{26:$Vu,31:$Vv,32:51},{3:52,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:53,31:$V9},o([4,5,6,7,8,11,12,13,14,15,16,17,18,19,20,65,67,68],$Vw,{55:[1,54],66:[1,55],69:[1,56]}),{46:[1,57]},{4:$Vx,5:$Vy,6:$Vz,7:$VA,8:$VB,11:$VC,12:$VD,13:$VE,14:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL,65:[1,58],67:[1,59],68:[1,60]},{9:[1,76]},{9:[1,77]},{9:[1,78]},{9:[1,79]},{9:[1,80]},{9:[1,81]},{9:[1,82]},{9:[1,83]},{9:[1,84]},{9:[1,85]},{9:[1,86]},{9:[1,87]},o($VM,[2,26],{9:[1,89],29:[1,88]}),o($VM,[2,27]),{3:90,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:53,31:$V9},{3:91,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:53,31:$V9},o($VN,[2,18]),o($VN,[2,19]),o($VN,[2,20]),o($VN,[2,21]),o($VN,[2,22]),{33:$VO,46:[1,92]},o($VP,[2,31],{29:[1,94]}),o($VP,[2,32]),{33:$VO,46:[1,95]},{33:$VO,46:[1,96]},{33:$VO,46:[1,97]},{4:$Vx,5:$Vy,6:$Vz,7:$VA,8:$VB,11:$VC,12:$VD,13:$VE,14:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL,52:[1,98]},o($VN,$Vw),{3:99,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:53,31:$V9},{3:100,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:53,31:$V9},{46:[1,101]},o([5,9,21,22,23,24,25,26,31,46,47,48,49,50,51,62,63,70,71,72,73,74,75,76,77,78,79,80,81],$VQ,{34:102}),{46:[1,103]},{46:[1,104]},{46:[1,105]},{3:106,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:53,31:$V9},{3:107,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:53,31:$V9},{3:108,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:53,31:$V9},{3:109,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:53,31:$V9},{3:110,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:53,31:$V9},{3:111,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:53,31:$V9},{3:112,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:53,31:$V9},{3:113,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:53,31:$V9},{3:114,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:53,31:$V9},{3:115,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:53,31:$V9},{3:116,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:53,31:$V9},{3:117,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:53,31:$V9},{3:118,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:53,31:$V9},o($VN,[2,16]),{3:119,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:53,31:$V9},{3:120,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:53,31:$V9},{10:[1,121]},{3:122,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:53,31:$V9},{3:123,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:53,31:$V9},{3:124,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:53,31:$V9},{3:125,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:53,31:$V9},{3:126,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:53,31:$V9},{3:127,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:53,31:$V9},{3:128,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:53,31:$V9},{3:129,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:53,31:$V9},{3:130,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:53,31:$V9},{3:131,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:53,31:$V9},o($VR,$VS,{28:53,27:132,3:133,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,31:$V9}),o([10,33],$VS,{28:53,3:133,27:134,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,31:$V9}),o($VN,[2,6]),{4:$Vx,5:$Vy,6:$Vz,7:$VA,8:$VB,10:[1,135],11:$VC,12:$VD,13:$VE,14:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL},o($Vt,[2,49]),{26:[1,136]},o($VR,$VS,{28:53,3:133,27:137,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,31:$V9}),o($Vt,[2,50]),o($Vt,[2,51]),o($Vt,[2,52]),{46:[1,138]},{4:$Vx,5:$Vy,6:$Vz,7:$VA,8:$VB,11:$VC,12:$VD,13:$VE,14:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL,56:[1,139]},{4:$Vx,5:$Vy,6:$Vz,7:$VA,8:$VB,11:$VC,12:$VD,13:$VE,14:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL,46:[1,140]},o($Vt,[2,64]),{3:24,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:22,31:$V9,35:142,36:6,37:7,38:8,39:9,40:10,41:11,42:12,43:13,44:14,45:15,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,62:$Vg,63:[1,141],70:$Vh,71:$Vi,72:$Vj,73:$Vk,74:$Vl,75:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs},o($VT,$VQ,{34:143}),o($Vt,[2,62]),o($Vt,[2,63]),o($VU,[2,1],{6:$Vz,7:$VA,8:$VB}),o($VU,[2,2],{6:$Vz,7:$VA,8:$VB}),o($VN,[2,3]),o($VN,[2,4]),o($VN,[2,5]),o($VV,[2,8],{4:$Vx,5:$Vy,6:$Vz,7:$VA,8:$VB}),o($VV,[2,9],{4:$Vx,5:$Vy,6:$Vz,7:$VA,8:$VB}),o($VV,[2,10],{4:$Vx,5:$Vy,6:$Vz,7:$VA,8:$VB}),o($VV,[2,11],{4:$Vx,5:$Vy,6:$Vz,7:$VA,8:$VB}),o($VV,[2,12],{4:$Vx,5:$Vy,6:$Vz,7:$VA,8:$VB}),o($VV,[2,13],{4:$Vx,5:$Vy,6:$Vz,7:$VA,8:$VB}),o($VW,[2,14],{4:$Vx,5:$Vy,6:$Vz,7:$VA,8:$VB,11:$VC,12:$VD,13:$VE,14:$VF,15:$VG,16:$VH,19:$VK}),o($VW,[2,15],{4:$Vx,5:$Vy,6:$Vz,7:$VA,8:$VB,11:$VC,12:$VD,13:$VE,14:$VF,15:$VG,16:$VH,19:$VK}),o([10,20,30,33,46,52,56,57,58,64,65,67,68],[2,17],{4:$Vx,5:$Vy,6:$Vz,7:$VA,8:$VB,11:$VC,12:$VD,13:$VE,14:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK}),{4:$Vx,5:$Vy,6:$Vz,7:$VA,8:$VB,11:$VC,12:$VD,13:$VE,14:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL,33:[1,144]},{46:[1,145]},{4:$Vx,5:$Vy,6:$Vz,7:$VA,8:$VB,11:$VC,12:$VD,13:$VE,14:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL,33:[1,146]},{4:$Vx,5:$Vy,6:$Vz,7:$VA,8:$VB,11:$VC,12:$VD,13:$VE,14:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL,33:[1,147]},{4:$Vx,5:$Vy,6:$Vz,7:$VA,8:$VB,10:[1,148],11:$VC,12:$VD,13:$VE,14:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL},{4:$Vx,5:$Vy,6:$Vz,7:$VA,8:$VB,10:[1,149],11:$VC,12:$VD,13:$VE,14:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL},{4:$Vx,5:$Vy,6:$Vz,7:$VA,8:$VB,11:$VC,12:$VD,13:$VE,14:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL,33:[1,150]},{4:$Vx,5:$Vy,6:$Vz,7:$VA,8:$VB,11:$VC,12:$VD,13:$VE,14:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL,33:[1,151]},{4:$Vx,5:$Vy,6:$Vz,7:$VA,8:$VB,11:$VC,12:$VD,13:$VE,14:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL,33:[1,152]},{4:$Vx,5:$Vy,6:$Vz,7:$VA,8:$VB,11:$VC,12:$VD,13:$VE,14:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL,33:[1,153]},{4:$Vx,5:$Vy,6:$Vz,7:$VA,8:$VB,11:$VC,12:$VD,13:$VE,14:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL,33:[1,154]},{4:$Vx,5:$Vy,6:$Vz,7:$VA,8:$VB,11:$VC,12:$VD,13:$VE,14:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL,33:[1,155]},{30:[1,156],33:$VX},o($VY,[2,34],{4:$Vx,5:$Vy,6:$Vz,7:$VA,8:$VB,11:$VC,12:$VD,13:$VE,14:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL}),{10:[1,158],33:$VX},o($VN,[2,7]),o($VP,[2,29],{29:[1,159]}),{30:[1,160],33:$VX},o([5,9,21,22,23,24,25,26,31,46,47,48,49,50,51,53,54,62,70,71,72,73,74,75,76,77,78,79,80,81],$VQ,{34:161}),{3:162,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:53,31:$V9},o($Vt,[2,61]),{3:163,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:53,31:$V9},o([5,9,21,22,23,24,25,26,31,46,47,48,49,50,51,53,54,60,62,63,70,71,72,73,74,75,76,77,78,79,80,81],[2,36]),{3:24,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:22,31:$V9,35:142,36:6,37:7,38:8,39:9,40:10,41:11,42:12,43:13,44:14,45:15,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,60:[1,164],62:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,74:$Vl,75:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs},{3:165,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:53,31:$V9},o($Vt,[2,66]),{3:166,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:53,31:$V9},{3:167,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:53,31:$V9},{46:[1,168]},{46:[1,169]},{3:170,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:53,31:$V9},{3:171,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:53,31:$V9},{3:172,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:53,31:$V9},{3:173,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:53,31:$V9},{3:174,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:53,31:$V9},{3:175,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:53,31:$V9},o($VM,[2,25]),{3:176,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:53,31:$V9},o($VN,[2,23]),o($VR,$VS,{28:53,3:133,27:177,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,31:$V9}),o($VP,[2,30]),{3:24,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:22,31:$V9,35:142,36:6,37:7,38:8,39:9,40:10,41:11,42:12,43:13,44:14,45:15,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,53:[1,178],54:[1,179],62:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,74:$Vl,75:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs},{4:$Vx,5:$Vy,6:$Vz,7:$VA,8:$VB,11:$VC,12:$VD,13:$VE,14:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL,57:[1,180]},{4:$Vx,5:$Vy,6:$Vz,7:$VA,8:$VB,11:$VC,12:$VD,13:$VE,14:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL,64:[1,181]},{46:[1,182]},{4:$Vx,5:$Vy,6:$Vz,7:$VA,8:$VB,10:[1,183],11:$VC,12:$VD,13:$VE,14:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL},{4:$Vx,5:$Vy,6:$Vz,7:$VA,8:$VB,11:$VC,12:$VD,13:$VE,14:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL,33:[1,184]},{4:$Vx,5:$Vy,6:$Vz,7:$VA,8:$VB,11:$VC,12:$VD,13:$VE,14:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL,33:[1,185]},o($Vt,[2,69]),o($Vt,[2,70]),{4:$Vx,5:$Vy,6:$Vz,7:$VA,8:$VB,11:$VC,12:$VD,13:$VE,14:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL,33:[1,186]},{4:$Vx,5:$Vy,6:$Vz,7:$VA,8:$VB,11:$VC,12:$VD,13:$VE,14:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL,33:[1,187]},{4:$Vx,5:$Vy,6:$Vz,7:$VA,8:$VB,11:$VC,12:$VD,13:$VE,14:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL,33:[1,188]},{4:$Vx,5:$Vy,6:$Vz,7:$VA,8:$VB,11:$VC,12:$VD,13:$VE,14:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL,33:[1,189]},{4:$Vx,5:$Vy,6:$Vz,7:$VA,8:$VB,11:$VC,12:$VD,13:$VE,14:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL,33:[1,190]},{4:$Vx,5:$Vy,6:$Vz,7:$VA,8:$VB,11:$VC,12:$VD,13:$VE,14:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL,33:[1,191]},o($VY,[2,33],{4:$Vx,5:$Vy,6:$Vz,7:$VA,8:$VB,11:$VC,12:$VD,13:$VE,14:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL}),{30:[1,192],33:$VX},{46:[1,193]},{46:[1,194]},{3:195,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:53,31:$V9,59:[1,196],61:[1,197]},{46:[1,198]},o($Vt,[2,60]),{46:[1,199]},{3:200,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:53,31:$V9},{3:201,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:53,31:$V9},{3:202,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:53,31:$V9},{3:203,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:53,31:$V9},{3:204,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:53,31:$V9},{3:205,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:53,31:$V9},{3:206,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:53,31:$V9},{3:207,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:53,31:$V9},o($VP,[2,28]),o($Vt,[2,53]),o([5,9,21,22,23,24,25,26,31,46,47,48,49,50,51,53,62,70,71,72,73,74,75,76,77,78,79,80,81],$VQ,{34:208}),{4:$Vx,5:$Vy,6:$Vz,7:$VA,8:$VB,11:$VC,12:$VD,13:$VE,14:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL,58:[1,209]},{46:[1,210]},{46:[1,211]},o($Vt,[2,59]),o($Vt,[2,65]),{4:$Vx,5:$Vy,6:$Vz,7:$VA,8:$VB,10:[1,212],11:$VC,12:$VD,13:$VE,14:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL},{4:$Vx,5:$Vy,6:$Vz,7:$VA,8:$VB,10:[1,213],11:$VC,12:$VD,13:$VE,14:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL},{4:$Vx,5:$Vy,6:$Vz,7:$VA,8:$VB,10:[1,214],11:$VC,12:$VD,13:$VE,14:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL},{4:$Vx,5:$Vy,6:$Vz,7:$VA,8:$VB,11:$VC,12:$VD,13:$VE,14:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL,33:[1,215]},{4:$Vx,5:$Vy,6:$Vz,7:$VA,8:$VB,11:$VC,12:$VD,13:$VE,14:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL,33:[1,216]},{4:$Vx,5:$Vy,6:$Vz,7:$VA,8:$VB,11:$VC,12:$VD,13:$VE,14:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL,33:[1,217]},{4:$Vx,5:$Vy,6:$Vz,7:$VA,8:$VB,10:[1,218],11:$VC,12:$VD,13:$VE,14:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL},{4:$Vx,5:$Vy,6:$Vz,7:$VA,8:$VB,10:[1,219],11:$VC,12:$VD,13:$VE,14:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL},{3:24,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:22,31:$V9,35:142,36:6,37:7,38:8,39:9,40:10,41:11,42:12,43:13,44:14,45:15,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,53:[1,220],62:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,74:$Vl,75:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs},{59:[1,221],61:[1,222]},o($VT,$VQ,{34:223}),o($VT,$VQ,{34:224}),{46:[1,225]},{46:[1,226]},{46:[1,227]},{3:228,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:53,31:$V9},{3:229,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:53,31:$V9},{3:230,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:53,31:$V9},{46:[1,231]},{46:[1,232]},{46:[1,233]},{46:[1,234]},{46:[1,235]},{3:24,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:22,31:$V9,35:142,36:6,37:7,38:8,39:9,40:10,41:11,42:12,43:13,44:14,45:15,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,60:[1,236],62:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,74:$Vl,75:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs},{3:24,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:22,31:$V9,35:142,36:6,37:7,38:8,39:9,40:10,41:11,42:12,43:13,44:14,45:15,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,60:[1,237],62:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,74:$Vl,75:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs},o($Vt,[2,67]),o($Vt,[2,68]),o($Vt,[2,71]),{4:$Vx,5:$Vy,6:$Vz,7:$VA,8:$VB,10:[1,238],11:$VC,12:$VD,13:$VE,14:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL},{4:$Vx,5:$Vy,6:$Vz,7:$VA,8:$VB,10:[1,239],11:$VC,12:$VD,13:$VE,14:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL},{4:$Vx,5:$Vy,6:$Vz,7:$VA,8:$VB,10:[1,240],11:$VC,12:$VD,13:$VE,14:$VF,15:$VG,16:$VH,17:$VI,18:$VJ,19:$VK,20:$VL},o($Vt,[2,75]),o($Vt,[2,76]),o($Vt,[2,54]),o($VT,$VQ,{34:241}),o($VT,$VQ,{34:242}),{46:[1,243]},{46:[1,244]},{46:[1,245]},{46:[1,246]},{46:[1,247]},{3:24,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:22,31:$V9,35:142,36:6,37:7,38:8,39:9,40:10,41:11,42:12,43:13,44:14,45:15,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,60:[1,248],62:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,74:$Vl,75:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs},{3:24,5:$V1,9:$V2,21:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:22,31:$V9,35:142,36:6,37:7,38:8,39:9,40:10,41:11,42:12,43:13,44:14,45:15,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,60:[1,249],62:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,74:$Vl,75:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs},o($Vt,[2,57]),o($Vt,[2,58]),o($Vt,[2,72]),o($Vt,[2,73]),o($Vt,[2,74]),{46:[1,250]},{46:[1,251]},o($Vt,[2,55]),o($Vt,[2,56])],
defaultActions: {3:[2,77]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 'true';
break;
case 1:return 'false';
break;
case 2:return 23;
break;
case 3:return 22;
break;
case 4:return 21;
break;
case 5:return 26;
break;
case 6:return 31;
break;
case 7:return 33;
break;
case 8:return 4;
break;
case 9:return 4;
break;
case 10:return 5;
break;
case 11:return 5;
break;
case 12:return 6;
break;
case 13:return 6;
break;
case 14:return 6;
break;
case 15:return 7;
break;
case 16:return 7;
break;
case 17:return 7;
break;
case 18:return 8;
break;
case 19:return 8;
break;
case 20:return 9;
break;
case 21:return 10;
break;
case 22:return 29;
break;
case 23:return 30;
break;
case 24:return 15;
break;
case 25:return 16;
break;
case 26:return 13;
break;
case 27:return 14;
break;
case 28:return 11;
break;
case 29:return 12;
break;
case 30:return 66;
break;
case 31:return 17;
break;
case 32:return 18;
break;
case 33:return 19;
break;
case 34:return 68;
break;
case 35:return 67;
break;
case 36:return 67;
break;
case 37:return 69;
break;
case 38:return 51;
break;
case 39:return 52;
break;
case 40:return 54;
break;
case 41:return 53;
break;
case 42:return 53;
break;
case 43:return 65;
break;
case 44:return 62;
break;
case 45:return 62;
break;
case 46:return 63;
break;
case 47:return 64;
break;
case 48:return 64;
break;
case 49:return 60;
break;
case 50:return 60;
break;
case 51:return 55;
break;
case 52:return 56;
break;
case 53:return 57;
break;
case 54:return 58;
break;
case 55:return 59;
break;
case 56:return 61;
break;
case 57:return 59;
break;
case 58:return 61;
break;
case 59:return 47;
break;
case 60:return 48;
break;
case 61:return 49;
break;
case 62:return 50;
break;
case 63:return 20;
break;
case 64:return 70;
break;
case 65:return 71;
break;
case 66:return 72;
break;
case 67:return 73;
break;
case 68:return 74;
break;
case 69:return 75;
break;
case 70:return 76;
break;
case 71:return 77;
break;
case 72:return 78;
break;
case 73:return 79;
break;
case 74:return 80;
break;
case 75:return 81;
break;
case 76:return 84;
break;
case 77:return 46;
break;
case 78:/* skip whitespace */
break;
}
},
rules: [/^(?:true\b)/,/^(?:false\b)/,/^(?:(「[^」]*」))/,/^(?:(([0]|(([1-9])([0-9])*))\.([0-9])+))/,/^(?:([0]|(([1-9])([0-9])*)))/,/^(?:(([a-zA-Z])([a-zA-Z0-9])*))/,/^(?:(《[^》]*》))/,/^(?:([，,、]))/,/^(?:\+)/,/^(?:＋)/,/^(?:-)/,/^(?:ー)/,/^(?:\*)/,/^(?:＊)/,/^(?:✕)/,/^(?:\/)/,/^(?:／)/,/^(?:÷)/,/^(?:%)/,/^(?:％)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:=)/,/^(?:!=)/,/^(?:←)/,/^(?:かつ)/,/^(?:または)/,/^(?:でない)/,/^(?:を(表示|印刷|出力)する)/,/^(?:を改行無しで(表示|印刷|出力)する)/,/^(?:を改行なしで(表示|印刷|出力)する)/,/^(?:を入力する)/,/^(?:もし)/,/^(?:ならば)/,/^(?:を実行し([，,、])そうでなければ)/,/^(?:を実行する)/,/^(?:を実行)/,/^(?:の間([，,、]))/,/^(?:繰り返し([，,、]))/,/^(?:繰返し([，,、]))/,/^(?:を([，,、]))/,/^(?:になるまで実行する)/,/^(?:になるまで実行)/,/^(?:を繰り返す)/,/^(?:を繰返す)/,/^(?:を)/,/^(?:から)/,/^(?:まで)/,/^(?:ずつ)/,/^(?:増やしながら([，,、]))/,/^(?:減らしながら([，,、]))/,/^(?:増やしつつ([，,、]))/,/^(?:減らしつつ([，,、]))/,/^(?:整数)/,/^(?:実数)/,/^(?:文字列)/,/^(?:真偽)/,/^(?:と)/,/^(?:描画領域開く)/,/^(?:描画領域閉じる)/,/^(?:線色設定)/,/^(?:塗色設定)/,/^(?:線太さ設定)/,/^(?:文字サイズ設定)/,/^(?:文字描画)/,/^(?:線描画)/,/^(?:矩形描画)/,/^(?:矩形塗描画)/,/^(?:円描画)/,/^(?:円塗描画)/,/^(?:$)/,/^(?:(\r\n|\r|\n))/,/^(?:([\s\t 　|｜]))/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = dncl;
exports.Parser = dncl.Parser;
exports.parse = function () { return dncl.parse.apply(dncl, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}